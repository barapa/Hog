
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 18 12:44:14 EDT 2012
//----------------------------------------------------

package front_end;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import util.ast.node.*;
import util.type.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 18 12:44:14 EDT 2012
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\006\012\000\002\007" +
    "\007\000\002\007\002\000\002\016\004\000\002\016\005" +
    "\000\002\041\012\000\002\042\006\000\002\042\004\000" +
    "\002\042\002\000\002\011\007\000\002\012\007\000\002" +
    "\013\017\000\002\010\006\000\002\022\004\000\002\022" +
    "\005\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\005\004\000\002\005\006\000\002\002\003\000\002" +
    "\002\003\000\002\002\004\000\002\015\002\000\002\015" +
    "\003\000\002\031\003\000\002\031\005\000\002\026\005" +
    "\000\002\026\003\000\002\027\005\000\002\027\003\000" +
    "\002\025\003\000\002\025\005\000\002\025\005\000\002" +
    "\030\003\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\032\003\000\002\032\005" +
    "\000\002\032\005\000\002\033\003\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\034\003\000\002" +
    "\034\006\000\002\035\004\000\002\035\003\000\002\044" +
    "\003\000\002\044\003\000\002\036\003\000\002\036\006" +
    "\000\002\036\005\000\002\036\005\000\002\036\006\000" +
    "\002\036\004\000\002\036\004\000\002\003\003\000\002" +
    "\003\005\000\002\037\003\000\002\037\003\000\002\037" +
    "\005\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\021\011\000\002\021\007\000" +
    "\002\023\010\000\002\023\002\000\002\024\006\000\002" +
    "\024\003\000\002\017\007\000\002\017\013\000\002\017" +
    "\011\000\002\020\006\000\002\020\005\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\004\006\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\006\057\005\074\ufffe\001\002\000\004\002" +
    "\326\001\002\000\004\063\302\001\002\000\004\074\007" +
    "\001\002\000\004\061\011\001\002\000\004\074\264\001" +
    "\002\000\004\067\012\001\002\000\026\022\075\023\035" +
    "\024\025\025\056\026\054\075\063\076\074\077\060\100" +
    "\040\101\102\001\002\000\004\063\014\001\002\000\004" +
    "\074\015\001\002\000\100\006\043\007\024\022\075\023" +
    "\035\024\025\025\056\026\054\027\030\034\050\035\042" +
    "\036\045\037\066\040\073\041\023\042\052\043\065\046" +
    "\032\047\061\050\027\051\057\053\041\055\uffe6\056\055" +
    "\064\uffe6\067\022\074\uffe6\075\063\076\074\077\060\100" +
    "\040\101\102\001\002\000\006\064\017\074\020\001\002" +
    "\000\004\074\ufff7\001\002\000\100\006\043\007\024\022" +
    "\075\023\035\024\025\025\056\026\054\027\030\034\050" +
    "\035\042\036\045\037\066\040\073\041\023\042\052\043" +
    "\065\046\032\047\061\050\027\051\057\053\041\055\uffe6" +
    "\056\055\064\uffe6\067\022\074\uffe6\075\063\076\074\077" +
    "\060\100\040\101\102\001\002\000\074\004\uffbf\005\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\027\uffbf\031\uffbf\033\uffbf" +
    "\044\uffbf\045\uffbf\052\uffbf\055\uffbf\063\uffbf\064\uffbf\065" +
    "\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf" +
    "\074\uffbf\001\002\000\046\022\075\023\035\024\025\025" +
    "\056\026\054\027\030\034\050\035\042\036\045\037\066" +
    "\040\073\046\032\067\022\075\063\076\074\077\060\100" +
    "\040\101\102\001\002\000\022\027\030\034\050\035\042" +
    "\036\045\037\066\040\073\046\032\067\022\001\002\000" +
    "\010\055\uffe9\064\uffe9\074\uffe9\001\002\000\012\014\uffab" +
    "\035\uffab\070\uffab\073\uffab\001\002\000\010\055\ufff1\064" +
    "\ufff1\074\ufff1\001\002\000\022\027\030\034\050\035\042" +
    "\036\045\037\066\040\073\046\032\067\022\001\002\000" +
    "\022\027\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\046\uffcb\067\uffcb\001\002\000\060\010\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\027\uffd3\031\uffd3\044\uffd3\045\uffd3\052\uffd3\055\uffd3\063" +
    "\uffd3\064\uffd3\066\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3" +
    "\074\uffd3\001\002\000\022\027\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\046\uffca\067\uffca\001\002\000\060" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\225\027\uffcf\031\uffcf\044\uffcf" +
    "\045\uffcf\052\uffcf\055\uffcf\063\uffcf\064\uffcf\066\uffcf\070" +
    "\uffcf\071\uffcf\073\uffcf\074\uffcf\001\002\000\052\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\027\130\031" +
    "\127\044\uffdb\045\uffdb\052\uffdb\055\uffdb\063\uffdb\064\uffdb" +
    "\066\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\001" +
    "\002\000\012\014\uffac\035\uffac\070\uffac\073\uffac\001\002" +
    "\000\014\013\222\014\uffa9\035\uffa9\070\uffa9\073\uffa9\001" +
    "\002\000\074\004\uffc9\005\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\027\uffc9\031\uffc9\033\uffc9\044\uffc9\045\uffc9\052\uffc9" +
    "\055\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070" +
    "\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\001\002\000\014" +
    "\013\uffa4\014\uffa4\035\uffa4\070\uffa4\073\uffa4\001\002\000" +
    "\022\027\030\034\050\035\042\036\045\037\066\040\073" +
    "\046\032\067\022\001\002\000\074\004\uffc0\005\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\027\uffc0\031\uffc0\033\uffc0\044" +
    "\uffc0\045\uffc0\052\uffc0\055\uffc0\063\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074" +
    "\uffc0\001\002\000\022\027\030\034\050\035\042\036\045" +
    "\037\066\040\073\046\032\067\022\001\002\000\060\010" +
    "\134\011\133\012\132\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\027\uffd6\031\uffd6\044\uffd6\045\uffd6\052" +
    "\uffd6\055\uffd6\063\uffd6\064\uffd6\066\uffd6\070\uffd6\071\uffd6" +
    "\072\uffd6\073\uffd6\074\uffd6\001\002\000\074\004\uffbd\005" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\027\uffbd\031\uffbd\033" +
    "\uffbd\044\uffbd\045\uffbd\052\uffbd\055\uffbd\063\uffbd\064\uffbd" +
    "\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073" +
    "\uffbd\074\uffbd\001\002\000\010\055\uffee\064\uffee\074\uffee" +
    "\001\002\000\032\044\151\045\uffe1\052\uffe1\055\uffe1\063" +
    "\uffe1\064\uffe1\066\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1" +
    "\074\uffe1\001\002\000\074\004\uffba\005\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\027\uffba\031\uffba\033\uffba\044\uffba\045" +
    "\uffba\052\uffba\055\uffba\063\uffba\064\uffba\065\uffba\066\uffba" +
    "\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba\001" +
    "\002\000\036\017\153\020\154\044\uffdf\045\uffdf\052\uffdf" +
    "\055\uffdf\063\uffdf\064\uffdf\066\uffdf\070\uffdf\071\uffdf\072" +
    "\uffdf\073\uffdf\074\uffdf\001\002\000\010\055\uffe8\064\uffe8" +
    "\074\uffe8\001\002\000\010\055\uffed\064\uffed\074\uffed\001" +
    "\002\000\012\014\uffae\035\uffae\070\uffae\073\uffae\001\002" +
    "\000\022\027\030\034\050\035\042\036\045\037\066\040" +
    "\073\046\032\067\022\001\002\000\012\014\uffaa\035\uffaa" +
    "\070\uffaa\073\uffaa\001\002\000\022\027\030\034\050\035" +
    "\042\036\045\037\066\040\073\046\032\067\022\001\002" +
    "\000\014\013\uffa5\014\uffa5\035\uffa5\070\uffa5\073\uffa5\001" +
    "\002\000\022\027\030\034\050\035\042\036\045\037\066" +
    "\040\073\046\032\067\022\001\002\000\010\055\ufff0\064" +
    "\ufff0\074\ufff0\001\002\000\014\013\uffa7\014\uffa7\035\uffa7" +
    "\070\uffa7\073\uffa7\001\002\000\022\027\030\034\050\035" +
    "\042\036\045\037\066\040\073\046\032\067\022\001\002" +
    "\000\004\072\157\001\002\000\074\004\uffbc\005\uffbc\010" +
    "\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc" +
    "\017\uffbc\020\uffbc\021\uffbc\027\uffbc\031\uffbc\033\uffbc\044" +
    "\uffbc\045\uffbc\052\uffbc\055\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\066\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074" +
    "\uffbc\001\002\000\026\045\147\052\uffe4\055\uffe4\063\uffe4" +
    "\064\uffe4\066\uffe4\070\uffe4\071\uffe4\073\uffe4\074\uffe4\001" +
    "\002\000\010\055\ufff2\064\ufff2\074\ufff2\001\002\000\010" +
    "\055\uffe5\064\uffe5\074\uffe5\001\002\000\004\035\144\001" +
    "\002\000\074\004\uffbb\005\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\027\uffbb\031\uffbb\033\uffbb\044\uffbb\045\uffbb\052\uffbb" +
    "\055\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070" +
    "\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\001\002\000\014" +
    "\013\uffa6\014\uffa6\035\uffa6\070\uffa6\073\uffa6\001\002\000" +
    "\012\014\uffad\035\uffad\070\uffad\073\uffad\001\002\000\046" +
    "\013\123\014\122\015\124\016\121\017\uffde\020\uffde\044" +
    "\uffde\045\uffde\052\uffde\055\uffde\063\uffde\064\uffde\066\uffde" +
    "\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde\001\002\000" +
    "\010\055\uffec\064\uffec\074\uffec\001\002\000\010\055\uffef" +
    "\064\uffef\074\uffef\001\002\000\074\004\103\005\105\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\027\uffcc\031\uffcc\033\107\044" +
    "\uffcc\045\uffcc\052\uffcc\055\uffcc\063\uffcc\064\uffcc\065\104" +
    "\066\uffcc\067\106\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074" +
    "\uffcc\001\002\000\014\013\uffa3\014\uffa3\035\uffa3\070\uffa3" +
    "\073\uffa3\001\002\000\074\004\uffc3\005\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\027\uffc3\031\uffc3\033\uffc3\044\uffc3\045" +
    "\uffc3\052\uffc3\055\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3" +
    "\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\001" +
    "\002\000\022\027\030\034\050\035\042\036\045\037\066" +
    "\040\073\046\032\067\022\001\002\000\074\004\uffc4\005" +
    "\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\027\uffc4\031\uffc4\033" +
    "\uffc4\044\uffc4\045\uffc4\052\uffc4\055\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073" +
    "\uffc4\074\uffc4\001\002\000\024\027\030\034\050\035\042" +
    "\036\045\037\066\040\073\046\032\067\022\070\112\001" +
    "\002\000\004\035\110\001\002\000\074\004\uffc7\005\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\027\uffc7\031\uffc7\033\uffc7" +
    "\044\uffc7\045\uffc7\052\uffc7\055\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7" +
    "\074\uffc7\001\002\000\006\070\115\073\114\001\002\000" +
    "\074\004\uffc6\005\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\027" +
    "\uffc6\031\uffc6\033\uffc6\044\uffc6\045\uffc6\052\uffc6\055\uffc6" +
    "\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071" +
    "\uffc6\072\uffc6\073\uffc6\074\uffc6\001\002\000\006\070\uffc2" +
    "\073\uffc2\001\002\000\022\027\030\034\050\035\042\036" +
    "\045\037\066\040\073\046\032\067\022\001\002\000\074" +
    "\004\uffc5\005\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\027\uffc5" +
    "\031\uffc5\033\uffc5\044\uffc5\045\uffc5\052\uffc5\055\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5" +
    "\072\uffc5\073\uffc5\074\uffc5\001\002\000\006\070\uffc1\073" +
    "\uffc1\001\002\000\004\066\120\001\002\000\074\004\uffc8" +
    "\005\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\027\uffc8\031\uffc8" +
    "\033\uffc8\044\uffc8\045\uffc8\052\uffc8\055\uffc8\063\uffc8\064" +
    "\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8" +
    "\073\uffc8\074\uffc8\001\002\000\022\027\030\034\050\035" +
    "\042\036\045\037\066\040\073\046\032\067\022\001\002" +
    "\000\022\027\030\034\050\035\042\036\045\037\066\040" +
    "\073\046\032\067\022\001\002\000\022\027\030\034\050" +
    "\035\042\036\045\037\066\040\073\046\032\067\022\001" +
    "\002\000\022\027\030\034\050\035\042\036\045\037\066" +
    "\040\073\046\032\067\022\001\002\000\062\010\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\027\uffcf\031\uffcf\044\uffcf\045\uffcf\052" +
    "\uffcf\055\uffcf\063\uffcf\064\uffcf\066\uffcf\070\uffcf\071\uffcf" +
    "\072\uffcf\073\uffcf\074\uffcf\001\002\000\052\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\027\130\031\127" +
    "\044\uffd8\045\uffd8\052\uffd8\055\uffd8\063\uffd8\064\uffd8\066" +
    "\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\001\002" +
    "\000\022\027\030\034\050\035\042\036\045\037\066\040" +
    "\073\046\032\067\022\001\002\000\022\027\030\034\050" +
    "\035\042\036\045\037\066\040\073\046\032\067\022\001" +
    "\002\000\060\010\134\011\133\012\132\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\027\uffd4\031\uffd4\044" +
    "\uffd4\045\uffd4\052\uffd4\055\uffd4\063\uffd4\064\uffd4\066\uffd4" +
    "\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\001\002\000" +
    "\022\027\030\034\050\035\042\036\045\037\066\040\073" +
    "\046\032\067\022\001\002\000\022\027\030\034\050\035" +
    "\042\036\045\037\066\040\073\046\032\067\022\001\002" +
    "\000\022\027\030\034\050\035\042\036\045\037\066\040" +
    "\073\046\032\067\022\001\002\000\060\010\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\027\uffd2\031\uffd2\044\uffd2\045\uffd2\052\uffd2\055\uffd2" +
    "\063\uffd2\064\uffd2\066\uffd2\070\uffd2\071\uffd2\072\uffd2\073" +
    "\uffd2\074\uffd2\001\002\000\060\010\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\027" +
    "\uffd1\031\uffd1\044\uffd1\045\uffd1\052\uffd1\055\uffd1\063\uffd1" +
    "\064\uffd1\066\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074" +
    "\uffd1\001\002\000\060\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\027\uffd0\031" +
    "\uffd0\044\uffd0\045\uffd0\052\uffd0\055\uffd0\063\uffd0\064\uffd0" +
    "\066\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\001" +
    "\002\000\060\010\134\011\133\012\132\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\027\uffd5\031\uffd5\044" +
    "\uffd5\045\uffd5\052\uffd5\055\uffd5\063\uffd5\064\uffd5\066\uffd5" +
    "\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\001\002\000" +
    "\052\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\027\130\031\127\044\uffda\045\uffda\052\uffda\055\uffda\063" +
    "\uffda\064\uffda\066\uffda\070\uffda\071\uffda\072\uffda\073\uffda" +
    "\074\uffda\001\002\000\052\013\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\027\130\031\127\044\uffd9\045\uffd9" +
    "\052\uffd9\055\uffd9\063\uffd9\064\uffd9\066\uffd9\070\uffd9\071" +
    "\uffd9\072\uffd9\073\uffd9\074\uffd9\001\002\000\052\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\027\130\031" +
    "\127\044\uffd7\045\uffd7\052\uffd7\055\uffd7\063\uffd7\064\uffd7" +
    "\066\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\001" +
    "\002\000\012\021\145\055\uffeb\064\uffeb\074\uffeb\001\002" +
    "\000\022\027\030\034\050\035\042\036\045\037\066\040" +
    "\073\046\032\067\022\001\002\000\010\055\uffea\064\uffea" +
    "\074\uffea\001\002\000\022\027\030\034\050\035\042\036" +
    "\045\037\066\040\073\046\032\067\022\001\002\000\032" +
    "\044\151\045\uffe2\052\uffe2\055\uffe2\063\uffe2\064\uffe2\066" +
    "\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\001\002" +
    "\000\022\027\030\034\050\035\042\036\045\037\066\040" +
    "\073\046\032\067\022\001\002\000\036\017\153\020\154" +
    "\044\uffe0\045\uffe0\052\uffe0\055\uffe0\063\uffe0\064\uffe0\066" +
    "\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0\001\002" +
    "\000\022\027\030\034\050\035\042\036\045\037\066\040" +
    "\073\046\032\067\022\001\002\000\022\027\030\034\050" +
    "\035\042\036\045\037\066\040\073\046\032\067\022\001" +
    "\002\000\046\013\123\014\122\015\124\016\121\017\uffdc" +
    "\020\uffdc\044\uffdc\045\uffdc\052\uffdc\055\uffdc\063\uffdc\064" +
    "\uffdc\066\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc" +
    "\001\002\000\046\013\123\014\122\015\124\016\121\017" +
    "\uffdd\020\uffdd\044\uffdd\045\uffdd\052\uffdd\055\uffdd\063\uffdd" +
    "\064\uffdd\066\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074" +
    "\uffdd\001\002\000\100\006\043\007\024\022\075\023\035" +
    "\024\025\025\056\026\054\027\030\034\050\035\042\036" +
    "\045\037\066\040\073\041\023\042\052\043\065\046\032" +
    "\047\061\050\027\051\057\053\041\055\uffe6\056\055\064" +
    "\uffe6\067\022\074\uffe6\075\063\076\074\077\060\100\040" +
    "\101\102\001\002\000\010\055\uffaf\064\uffaf\074\uffaf\001" +
    "\002\000\062\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\027\uffcd\031" +
    "\uffcd\044\uffcd\045\uffcd\052\uffcd\055\uffcd\063\uffcd\064\uffcd" +
    "\066\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\001" +
    "\002\000\004\063\163\001\002\000\004\074\015\001\002" +
    "\000\006\064\165\074\020\001\002\000\010\055\uffb3\064" +
    "\uffb3\074\uffb3\001\002\000\004\052\167\001\002\000\022" +
    "\027\030\034\050\035\042\036\045\037\066\040\073\046" +
    "\032\067\022\001\002\000\004\063\171\001\002\000\004" +
    "\074\015\001\002\000\006\064\173\074\020\001\002\000" +
    "\010\055\uffb1\064\uffb1\074\uffb1\001\002\000\004\063\175" +
    "\001\002\000\004\074\015\001\002\000\006\064\177\074" +
    "\020\001\002\000\010\055\uffb8\064\uffb8\074\uffb8\001\002" +
    "\000\010\055\uffe7\064\uffe7\074\uffe7\001\002\000\004\063" +
    "\202\001\002\000\004\074\015\001\002\000\006\064\204" +
    "\074\020\001\002\000\010\054\uffb6\055\206\074\uffb6\001" +
    "\002\000\006\054\214\074\216\001\002\000\022\027\030" +
    "\034\050\035\042\036\045\037\066\040\073\046\032\067" +
    "\022\001\002\000\004\063\210\001\002\000\004\074\015" +
    "\001\002\000\010\055\206\064\uffb6\074\020\001\002\000" +
    "\004\064\213\001\002\000\010\054\uffb7\064\uffb7\074\uffb7" +
    "\001\002\000\004\063\217\001\002\000\010\055\uffb9\064" +
    "\uffb9\074\uffb9\001\002\000\010\055\uffb4\064\uffb4\074\uffb4" +
    "\001\002\000\004\074\015\001\002\000\006\064\221\074" +
    "\020\001\002\000\010\055\uffb5\064\uffb5\074\uffb5\001\002" +
    "\000\026\022\075\023\035\024\025\025\056\026\054\075" +
    "\063\076\074\077\060\100\040\101\102\001\002\000\004" +
    "\014\224\001\002\000\014\013\uffa8\014\uffa8\035\uffa8\070" +
    "\uffa8\073\uffa8\001\002\000\022\027\030\034\050\035\042" +
    "\036\045\037\066\040\073\046\032\067\022\001\002\000" +
    "\024\052\uffe3\055\uffe3\063\uffe3\064\uffe3\066\uffe3\070\uffe3" +
    "\071\uffe3\073\uffe3\074\uffe3\001\002\000\004\071\230\001" +
    "\002\000\022\027\030\034\050\035\042\036\045\037\066" +
    "\040\073\046\032\067\022\001\002\000\004\071\232\001" +
    "\002\000\022\027\030\034\050\035\042\036\045\037\066" +
    "\040\073\046\032\067\022\001\002\000\004\063\234\001" +
    "\002\000\004\074\015\001\002\000\006\064\236\074\020" +
    "\001\002\000\010\055\uffb2\064\uffb2\074\uffb2\001\002\000" +
    "\006\045\147\072\240\001\002\000\100\006\043\007\024" +
    "\022\075\023\035\024\025\025\056\026\054\027\030\034" +
    "\050\035\042\036\045\037\066\040\073\041\023\042\052" +
    "\043\065\046\032\047\061\050\027\051\057\053\041\055" +
    "\uffe6\056\055\064\uffe6\067\022\074\uffe6\075\063\076\074" +
    "\077\060\100\040\101\102\001\002\000\010\055\uffb0\064" +
    "\uffb0\074\uffb0\001\002\000\004\070\245\001\002\000\004" +
    "\070\244\001\002\000\074\004\uffbe\005\uffbe\010\uffbe\011" +
    "\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\027\uffbe\031\uffbe\033\uffbe\044\uffbe\045" +
    "\uffbe\052\uffbe\055\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe" +
    "\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\001" +
    "\002\000\022\027\030\034\050\035\042\036\045\037\066" +
    "\040\073\046\032\067\022\001\002\000\062\010\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\027\uffce\031\uffce\044\uffce\045\uffce\052" +
    "\uffce\055\uffce\063\uffce\064\uffce\066\uffce\070\uffce\071\uffce" +
    "\072\uffce\073\uffce\074\uffce\001\002\000\010\055\ufff3\064" +
    "\ufff3\074\ufff3\001\002\000\004\035\251\001\002\000\004" +
    "\073\252\001\002\000\026\022\075\023\035\024\025\025" +
    "\056\026\054\075\063\076\074\077\060\100\040\101\102" +
    "\001\002\000\004\035\254\001\002\000\004\070\255\001" +
    "\002\000\004\032\256\001\002\000\004\067\257\001\002" +
    "\000\026\022\075\023\035\024\025\025\056\026\054\075" +
    "\063\076\074\077\060\100\040\101\102\001\002\000\004" +
    "\073\261\001\002\000\026\022\075\023\035\024\025\025" +
    "\056\026\054\075\063\076\074\077\060\100\040\101\102" +
    "\001\002\000\004\070\263\001\002\000\004\063\ufff5\001" +
    "\002\000\004\062\265\001\002\000\004\067\012\001\002" +
    "\000\004\074\267\001\002\000\004\060\270\001\002\000" +
    "\004\063\273\001\002\000\004\074\272\001\002\000\004" +
    "\002\000\001\002\000\004\074\015\001\002\000\006\064" +
    "\275\074\020\001\002\000\004\074\ufff4\001\002\000\004" +
    "\063\277\001\002\000\004\074\015\001\002\000\006\064" +
    "\301\074\020\001\002\000\004\074\ufff6\001\002\000\004" +
    "\074\304\001\002\000\004\074\323\001\002\000\026\022" +
    "\075\023\035\024\025\025\056\026\054\075\063\076\074" +
    "\077\060\100\040\101\102\001\002\000\004\035\307\001" +
    "\002\000\004\074\ufffd\001\002\000\004\067\310\001\002" +
    "\000\032\022\075\023\035\024\025\025\056\026\054\070" +
    "\ufff8\073\ufff8\075\063\076\074\077\060\100\040\101\102" +
    "\001\002\000\004\035\322\001\002\000\006\070\314\073" +
    "\313\001\002\000\026\022\075\023\035\024\025\025\056" +
    "\026\054\075\063\076\074\077\060\100\040\101\102\001" +
    "\002\000\004\063\315\001\002\000\004\074\015\001\002" +
    "\000\006\064\317\074\020\001\002\000\004\074\ufffb\001" +
    "\002\000\004\035\321\001\002\000\006\070\ufffa\073\ufffa" +
    "\001\002\000\006\070\ufff9\073\ufff9\001\002\000\030\022" +
    "\075\023\035\024\025\025\056\026\054\064\325\075\063" +
    "\076\074\077\060\100\040\101\102\001\002\000\004\074" +
    "\ufffc\001\002\000\004\074\uffff\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\006\006\003\007\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\007" +
    "\001\001\000\002\001\001\000\004\013\012\001\001\000" +
    "\006\004\035\043\247\001\001\000\002\001\001\000\004" +
    "\022\015\001\001\000\056\002\052\004\035\005\076\014" +
    "\246\015\025\017\077\020\045\021\061\025\050\026\066" +
    "\027\046\030\075\031\070\032\033\033\043\034\030\035" +
    "\032\036\100\037\036\040\020\043\071\044\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\002\052\004" +
    "\035\005\076\014\067\015\025\017\077\020\045\021\061" +
    "\025\050\026\066\027\046\030\075\031\070\032\033\033" +
    "\043\034\030\035\032\036\100\037\036\040\020\043\071" +
    "\044\063\001\001\000\002\001\001\000\040\004\035\025" +
    "\050\026\066\027\046\030\075\031\242\032\033\033\043" +
    "\034\030\035\032\036\100\037\036\040\020\043\241\044" +
    "\063\001\001\000\032\025\050\026\236\027\046\030\075" +
    "\032\033\033\043\034\030\035\124\036\100\037\036\040" +
    "\020\044\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\025\050\026\066\027\046\030" +
    "\075\031\226\032\033\033\043\034\030\035\032\036\100" +
    "\037\036\040\020\044\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\025\050\026\066\027\046" +
    "\030\075\031\200\032\033\033\043\034\030\035\032\036" +
    "\100\037\036\040\020\044\063\001\001\000\002\001\001" +
    "\000\034\025\050\026\066\027\046\030\075\031\177\032" +
    "\033\033\043\034\030\035\032\036\100\037\036\040\020" +
    "\044\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\025\050\026\066\027\046\030\075\031\173" +
    "\032\033\033\043\034\030\035\032\036\100\037\036\040" +
    "\020\044\063\001\001\000\002\001\001\000\034\025\050" +
    "\026\066\027\046\030\075\031\165\032\033\033\043\034" +
    "\030\035\032\036\100\037\036\040\020\044\063\001\001" +
    "\000\002\001\001\000\034\025\050\026\066\027\046\030" +
    "\075\031\161\032\033\033\043\034\030\035\032\036\100" +
    "\037\036\040\020\044\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\034\160\035\124\036\100\037\036" +
    "\040\020\044\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\025\050\026\066\027\046\030\075\031\116" +
    "\032\033\033\043\034\030\035\032\036\100\037\036\040" +
    "\020\044\063\001\001\000\002\001\001\000\036\003\110" +
    "\025\050\026\066\027\046\030\075\031\112\032\033\033" +
    "\043\034\030\035\032\036\100\037\036\040\020\044\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\025\050" +
    "\026\066\027\046\030\075\031\115\032\033\033\043\034" +
    "\030\035\032\036\100\037\036\040\020\044\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\032\142\033\043\034\030\035\124" +
    "\036\100\037\036\040\020\044\063\001\001\000\022\032" +
    "\141\033\043\034\030\035\124\036\100\037\036\040\020" +
    "\044\063\001\001\000\022\032\140\033\043\034\030\035" +
    "\124\036\100\037\036\040\020\044\063\001\001\000\022" +
    "\032\125\033\043\034\030\035\124\036\100\037\036\040" +
    "\020\044\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\033\137\034\030\035\124\036\100\037\036\040" +
    "\020\044\063\001\001\000\020\033\130\034\030\035\124" +
    "\036\100\037\036\040\020\044\063\001\001\000\002\001" +
    "\001\000\016\034\136\035\124\036\100\037\036\040\020" +
    "\044\063\001\001\000\016\034\135\035\124\036\100\037" +
    "\036\040\020\044\063\001\001\000\016\034\134\035\124" +
    "\036\100\037\036\040\020\044\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\025\050\026\066\027\046\030\075" +
    "\031\145\032\033\033\043\034\030\035\032\036\100\037" +
    "\036\040\020\044\063\001\001\000\002\001\001\000\030" +
    "\025\050\027\147\030\075\032\033\033\043\034\030\035" +
    "\124\036\100\037\036\040\020\044\063\001\001\000\002" +
    "\001\001\000\026\025\151\030\075\032\033\033\043\034" +
    "\030\035\124\036\100\037\036\040\020\044\063\001\001" +
    "\000\002\001\001\000\024\030\155\032\033\033\043\034" +
    "\030\035\124\036\100\037\036\040\020\044\063\001\001" +
    "\000\024\030\154\032\033\033\043\034\030\035\124\036" +
    "\100\037\036\040\020\044\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\002\052\004\035\005\076\014" +
    "\157\015\025\017\077\020\045\021\061\025\050\026\066" +
    "\027\046\030\075\031\070\032\033\033\043\034\030\035" +
    "\032\036\100\037\036\040\020\043\071\044\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\025\050\026\066\027\046\030" +
    "\075\031\167\032\033\033\043\034\030\035\032\036\100" +
    "\037\036\040\020\044\063\001\001\000\002\001\001\000" +
    "\004\022\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\202\001\001\000\002\001\001\000\004\023" +
    "\204\001\001\000\004\024\214\001\001\000\034\025\050" +
    "\026\066\027\046\030\075\031\206\032\033\033\043\034" +
    "\030\035\032\036\100\037\036\040\020\044\063\001\001" +
    "\000\002\001\001\000\004\022\210\001\001\000\004\023" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\035\043\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\025\050\026\066\027\046\030\075\031\225" +
    "\032\033\033\043\034\030\035\032\036\100\037\036\040" +
    "\020\044\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\025\050\026\066\027\046\030\075\031\230\032" +
    "\033\033\043\034\030\035\032\036\100\037\036\040\020" +
    "\044\063\001\001\000\002\001\001\000\034\025\050\026" +
    "\066\027\046\030\075\031\232\032\033\033\043\034\030" +
    "\035\032\036\100\037\036\040\020\044\063\001\001\000" +
    "\002\001\001\000\004\022\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\002\052\004" +
    "\035\005\076\014\240\015\025\017\077\020\045\021\061" +
    "\025\050\026\066\027\046\030\075\031\070\032\033\033" +
    "\043\034\030\035\032\036\100\037\036\040\020\043\071" +
    "\044\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\034\245\035\124" +
    "\036\100\037\036\040\020\044\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\035\043\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\035\043\257\001\001\000\002\001\001\000\006\004" +
    "\035\043\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\265\001\001\000\004\013\275\001\001\000" +
    "\002\001\001\000\004\010\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\302\001\001\000\002\001\001\000\010" +
    "\004\035\041\305\043\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\035\042\311" +
    "\043\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\035\043\317\001\001\000\002\001\001\000\004" +
    "\022\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\035\041\323\043\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return lexer.next_token();
  
    }


    Lexer lexer;
    private File file;
    public Parser( File file ) {
      this();
      this.file = file;
      try {
        lexer = new Lexer( new FileReader( file ) );
      }
      catch ( IOException exception ) {
        throw new Error( "Unable to open file \"" + file + "\"" );
      }
    }
    
    public Parser(Lexer l) {
      super(l);
      lexer=l;
    }
  
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    Hashtable table = new Hashtable();
  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DerivedType ::= SET 
            {
              Object RESULT =null;
		
      System.out.println("DerivedType -> SET");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DerivedType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DerivedType ::= MULTISET 
            {
              Object RESULT =null;
		
      System.out.println("DerivedType -> MULTISET");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DerivedType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DerivedType ::= DICT 
            {
              Object RESULT =null;
		
      System.out.println("DerivedType -> DICT");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DerivedType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DerivedType ::= ITER 
            {
              Object RESULT =null;
		
      System.out.println("DerivedType -> ITER");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DerivedType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DerivedType ::= LIST 
            {
              Object RESULT =null;
		
      System.out.println("DerivedType -> LIST");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DerivedType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DerivedType ::= DerivedType LESS Type GRTR 
            {
              Object RESULT =null;
		
      System.out.println("DerivedType -> DerivedType L_ANGLE Type R_ANGLE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DerivedType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Type ::= DerivedType 
            {
              Types.Type RESULT =null;
		
      System.out.println("Type -> DerivedType");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Type ::= REAL 
            {
              Types.Type RESULT =null;
		
      // RESULT = Types.Type.REAL;
      System.out.println("Type -> REAL");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Type ::= INT 
            {
              Types.Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = Types.Type.INT;
      System.out.println("Type -> INT");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Type ::= BOOL 
            {
              Types.Type RESULT =null;
		
      // RESULT = Types.Type.BOOL;
      System.out.println("Type -> BOOL");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Type ::= TEXT 
            {
              Types.Type RESULT =null;
		
      // RESULT = Types.Type.TEXT;
      System.out.println("Type -> TEXT");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Type ::= VOID 
            {
              Types.Type RESULT =null;
		
      // RESULT = Types.Type.VOID;
      System.out.println("Type -> VOID");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LabeledStatement ::= DEFAULT COL Statement 
            {
              StatementNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      System.out.println("DEFAULT COL Statement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabeledStatement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LabeledStatement ::= CASE LogicalExpression COL Statement 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      System.out.println("CASE LogicalExpression COL Statement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabeledStatement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IterationStatement ::= FOREACH Expression IN Expression L_BRACE StatementList R_BRACE 
            {
              StatementNode RESULT =null;
		
      System.out.println("FOREACH L_PAREN Expression IN Expression R_PAREN Statement"); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IterationStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IterationStatement ::= FOR Expression SEMICOL Expression SEMICOL Expression L_BRACE StatementList R_BRACE 
            {
              StatementNode RESULT =null;
		
      System.out.println("FOR L_PAREN Expression SEMICOL Expression SEMICOL Expression R_PAREN Statement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IterationStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IterationStatement ::= WHILE Expression L_BRACE StatementList R_BRACE 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      System.out.println("WHILE L_PAREN Expression R_PAREN Statement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IterationStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ElseStatement ::= NEWLINE 
            {
              SelectionStatementNode RESULT =null;
		
      System.out.println("ElseStatement -> epsilon");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStatement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ElseStatement ::= ELSE L_BRACE StatementList R_BRACE 
            {
              SelectionStatementNode RESULT =null;
		
      // RESULT = new SelectionStatementNode(null, s, null);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStatement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ElseIfStatement ::= 
            {
              SelectionStatementNode RESULT =null;
		
      System.out.println("ElseIfStatement -> epsilon");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseIfStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ElseIfStatement ::= ELSEIF Expression L_BRACE StatementList ElseIfStatement R_BRACE 
            {
              SelectionStatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SelectionStatementNode elif = (SelectionStatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = new SelectionStatementNode(e, elif, null);
      System.out.println("ElseIfStatement -> ELSEIF L_PAREN Expression R_PAREN ElseIfStatement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseIfStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SelectionStatement ::= SWITCH Expression L_BRACE StatementList R_BRACE 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      System.out.println("SelectionStatement -> SWITCH L_PAREN Expression R_PAREN Statement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectionStatement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SelectionStatement ::= IF Expression L_BRACE StatementList R_BRACE ElseIfStatement ElseStatement 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SelectionStatementNode elif = (SelectionStatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SelectionStatementNode el = (SelectionStatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // SelectionStatementNode elseIfAndElse = new SelectionStatementNode(elif.getCondition(), elif, el);
      // RESULT = new SelectionStatementNode(e, s, elseIfAndElse);
      System.out.println("SelectionStatement -> IF L_PAREN Expression R_PAREN Statement ElseIfStatement ElseStatement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectionStatement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Constant ::= TEXT_LITERAL 
            {
              ExpressionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new ConstantNode(Types.Type.TEXT, t);
      System.out.println("Constant -> TEXT_LITERAL");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Constant ::= BOOL_CONST 
            {
              ExpressionNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new ConstantNode(Types.Type.BOOL, b);
      System.out.println("Constant -> BOOL_CONST");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Constant ::= REAL_CONST 
            {
              ExpressionNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new ConstantNode(Types.Type.REAL, d);
      System.out.println("Constant -> REAL_CONST");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Constant ::= INT_CONST 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new ConstantNode(Types.Type.INT, i);
      System.out.println("Constant -> INT_CONST: " + i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PrimaryExpression ::= L_PAREN Expression R_PAREN 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = e;
      System.out.println("PrimaryExpression -> L_PAREN Expression R_PAREN");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PrimaryExpression ::= Constant 
            {
              ExpressionNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = c;
      System.out.println("PrimaryExpression -> Constant"); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PrimaryExpression ::= ID 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new IdNode(i);
      System.out.println("PrimaryExpression -> ID: " + i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ArgumentExpressionList ::= ArgumentExpressionList COMMA Expression 
            {
              Object RESULT =null;
		
      System.out.println("ArgumentExpressionList -> ArgumentExpressionList COMMA Expression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentExpressionList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ArgumentExpressionList ::= Expression 
            {
              Object RESULT =null;
		
      System.out.println("ArgumentExpressionList -> Expression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentExpressionList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PostfixExpression ::= PostfixExpression DECR 
            {
              ExpressionNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode p = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = new UnOpNode(UnOpNode.OpType.DECR, p);
      System.out.println("PostfixExpression -> PostfixExpression DECR");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PostfixExpression ::= PostfixExpression INCR 
            {
              ExpressionNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode p = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = new UnOpNode(UnOpNode.OpType.INCR, p);
      System.out.println("PostfixExpression -> PostfixExpression INCR");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PostfixExpression ::= PostfixExpression L_PAREN ArgumentExpressionList R_PAREN 
            {
              ExpressionNode RESULT =null;
		
      System.out.println("PostfixExpression -> PostfixExpression L_PAREN ArgumentExpressionList R_PAREN"); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PostfixExpression ::= PostfixExpression L_PAREN R_PAREN 
            {
              ExpressionNode RESULT =null;
		
      System.out.println("PostfixExpression -> PostfixExpression L_PAREN R_PAREN"); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PostfixExpression ::= PostfixExpression DOT ID 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      System.out.println("PostfixExpression -> PostfixExpression DOT ID: " + i); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PostfixExpression ::= PostfixExpression L_BRKT Expression R_BRKT 
            {
              ExpressionNode RESULT =null;
		
      System.out.println("PostfixExpression -> PostfixExpression L_BRKT Expression R_BRKT"); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PostfixExpression ::= PrimaryExpression 
            {
              ExpressionNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode p = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = p;
      System.out.println("PostfixExpression -> PrimaryExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // UnaryOperator ::= NOT 
            {
              UnOpNode.OpType RESULT =null;
		
      // RESULT = UnOpNode.OpType.NOT;
      System.out.println("UnaryOperator -> NOT");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOperator",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // UnaryOperator ::= MINUS 
            {
              UnOpNode.OpType RESULT =null;
		
      // RESULT = UnOpNode.OpType.UMINUS;
      System.out.println("UnaryOperator -> UMINUS");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOperator",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // UnaryExpression ::= PostfixExpression 
            {
              ExpressionNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode p = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = p;
      System.out.println("UnaryExpression -> PostfixExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // UnaryExpression ::= UnaryOperator CastExpression 
            {
              ExpressionNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		UnOpNode.OpType u = (UnOpNode.OpType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new UnOpNode(u, c);
      System.out.println("UnaryExpression -> UnaryOperator CastExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CastExpression ::= L_PAREN Type R_PAREN CastExpression 
            {
              ExpressionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Types.Type t = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new UnOpNode(UnOpNode.OpType.CAST, c, t);
      System.out.println("CastExpression -> L_PAREN Type R_PAREN CastExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CastExpression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CastExpression ::= UnaryExpression 
            {
              ExpressionNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode u = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = u;
      System.out.println("CastExpression -> UnaryExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CastExpression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MultiplicativeExpression ::= MultiplicativeExpression MOD CastExpression 
            {
              ExpressionNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode m = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.MOD, m, c);
      System.out.println("MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MultiplicativeExpression ::= MultiplicativeExpression DIVIDE CastExpression 
            {
              ExpressionNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode m = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.DIVIDE, m, c);
      System.out.println("MultiplicativeExpression -> MultiplicativeExpression DIVIDE CastExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MultiplicativeExpression ::= MultiplicativeExpression TIMES CastExpression 
            {
              ExpressionNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode m = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.TIMES, m, c);
      System.out.println("MultiplicativeExpression -> MultiplicativeExpression TIMES CastExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MultiplicativeExpression ::= CastExpression 
            {
              ExpressionNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = c;
      System.out.println("MultiplicativeExpression -> CastExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression 
            {
              ExpressionNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode m = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
      // RESULT = new BiOpNode(BiOpNode.OpType.MINUS, a, m);
      System.out.println("AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression 
            {
              ExpressionNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode m = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.PLUS, a, m);
      System.out.println("AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AdditiveExpression ::= MultiplicativeExpression 
            {
              ExpressionNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode m = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = m;
      System.out.println("AdditiveExpression -> MultiplicativeExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RelationalExpression ::= RelationalExpression GRTR_EQL AdditiveExpression 
            {
              ExpressionNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.GRTR_EQL, r, a);
      System.out.println("RelationalExpression -> RelationalExpression GRTR_EQL AdditiveExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RelationalExpression ::= RelationalExpression LESS_EQL AdditiveExpression 
            {
              ExpressionNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.LESS_EQL, r, a);
      System.out.println("RelationalExpression -> RelationalExpression LESS_EQL AdditiveExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RelationalExpression ::= RelationalExpression GRTR AdditiveExpression 
            {
              ExpressionNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.GRTR, r, a);
      System.out.println("RelationalExpression -> RelationalExpression GRTR AdditiveExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RelationalExpression ::= RelationalExpression LESS AdditiveExpression 
            {
              ExpressionNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.LESS, r, a);
      System.out.println("RelationalExpression -> RelationalExpression LESS AdditiveExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RelationalExpression ::= AdditiveExpression 
            {
              ExpressionNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = a;
      System.out.println("RelationalExpression -> AdditiveExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EqualityExpression ::= EqualityExpression NOT_EQLS RelationalExpression 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.NOT_EQLS, e, r);
      System.out.println("EqualityExpression -> EqualityExpression NOT_EQLS RelationalExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EqualityExpression ::= EqualityExpression DBL_EQLS RelationalExpression 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.DBL_EQLS, e, r);
      System.out.println("EqualityExpression -> EqualityExpression DBL_EQLS RelationalExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EqualityExpression ::= RelationalExpression 
            {
              ExpressionNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
      // RESULT = r; 
      System.out.println("EqualityExpression -> RelationalExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LogicalTerm ::= EqualityExpression 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = e;
      System.out.println("LogicalTerm -> EqualityExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalTerm",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LogicalTerm ::= LogicalTerm AND EqualityExpression 
            {
              ExpressionNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.AND, l, e);
      System.out.println("LogicalTerm -> LogicalTerm AND EqualityExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalTerm",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LogicalExpression ::= LogicalTerm 
            {
              ExpressionNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = l;
      System.out.println("LogicalExpression -> LogicalTerm");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LogicalExpression ::= LogicalExpression OR LogicalTerm 
            {
              ExpressionNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode le = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode lt = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.OR, le, lt);
      System.out.println("LogicalExpression -> LogicalExpression OR LogicalTerm");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expression ::= UnaryExpression ASSIGN Expression 
            {
              ExpressionNode RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode ue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.ASSIGN, ue, e);
      System.out.println("Expression -> UnaryExpression ASSIGN Expression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expression ::= LogicalExpression 
            {
              ExpressionNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode le = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     // RESULT = le;
     System.out.println("Expression -> LogicalExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ExpressionStatement ::= Expression 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = e;
      System.out.println("ExpressionStatement -> Expression NEWLINE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStatement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ExpressionStatement ::= 
            {
              StatementNode RESULT =null;
		
      /* TODO is this correct? */
      System.out.println("ExpressionStatement -> NEWLINE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStatement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // JumpStatement ::= RETURN Expression 
            {
              Object RESULT =null;
		
      System.out.println("JumpStatement -> RETURN Expression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // JumpStatement ::= BREAK 
            {
              Object RESULT =null;
		
      System.out.println("JumpStatement -> BREAK NEWLINE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // JumpStatement ::= CONTINUE 
            {
              Object RESULT =null;
		
      System.out.println("JumpStatement -> CONTINUE NEWLINE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DeclarationStatement ::= Type ID ASSIGN Expression 
            {
              Object RESULT =null;
		
      System.out.println("DeclarationStatement -> Type ID ASSIGN Expression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclarationStatement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DeclarationStatement ::= Type ID 
            {
              Object RESULT =null;
		
      System.out.println("DeclarationStatement -> Type ID");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclarationStatement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= DeclarationStatement 
            {
              StatementNode RESULT =null;
		
      System.out.println("Statement -> DeclarationStatement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= JumpStatement 
            {
              StatementNode RESULT =null;
		
      System.out.println("Statement -> JumpStatement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= LabeledStatement 
            {
              StatementNode RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode ls = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     // List<Node> children = new ArrayList<Node>();
     // children.add(ls);
     // RESULT = new StatementNode(children);
     System.out.println("Statement -> LabeledStatement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= IterationStatement 
            {
              StatementNode RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode is = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // List<Node> children = new ArrayList<Node>();
      // children.add(is);
      // RESULT = new StatementNode(children);
      System.out.println("Statement -> IterationStatement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= SelectionStatement 
            {
              StatementNode RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode ss = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // List<Node> children = new ArrayList<Node>();
      // children.add(ss);
      // RESULT = new StatementNode(children);
      System.out.println("Statement -> SelectionStatement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= ExpressionStatement 
            {
              StatementNode RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode es = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // List<Node> children = new ArrayList<Node>();
      // children.add(es);
      // RESULT = new StatementNode(children);
      System.out.println("Statement -> ExpressionStatement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // StatementList ::= StatementList NEWLINE Statement 
            {
              StatementNode RESULT =null;
		
      System.out.println("StatementList -> StatementList Statement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // StatementList ::= NEWLINE Statement 
            {
              StatementNode RESULT =null;
		
      System.out.println("StatementList -> Statement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Main ::= MAIN L_BRACE StatementList R_BRACE 
            {
              SectionNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode sl = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = new SectionNode(sl);
      System.out.println("Main -> MAIN L_BRACE StatementList R_BRACE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SectionType ::= L_PAREN Type ID COMMA Type ID R_PAREN ARROW L_PAREN Type COMMA Type R_PAREN 
            {
              SectionTypeNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Types.Type t1 = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Types.Type t2 = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Types.Type t3 = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types.Type t4 = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
     // RESULT = new SectionTypeNode(t1, t2, t3, t4);
     System.out.println("SectionType -> L_PAREN Type ID COMMA Type ID R_PAREN ARROW L_PAREN Type COMMA Type R_PAREN");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SectionType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Reduce ::= REDUCE SectionType L_BRACE StatementList R_BRACE 
            {
              SectionNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SectionTypeNode st = (SectionTypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode sl = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = new SectionNode(st, sl);
      System.out.println("Reduce -> REDUCE SectionType L_BRACE StatementList R_BRACE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Reduce",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Map ::= MAP SectionType L_BRACE StatementList R_BRACE 
            {
              SectionNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SectionTypeNode st = (SectionTypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode sl = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = new SectionNode(st, sl);
      System.out.println("Map -> MAP SectionType L_BRACE StatementList R_BRACE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Map",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ParameterList ::= 
            {
              ParametersNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ParameterList ::= Type ID 
            {
              ParametersNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types.Type t = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new ParametersNode(t, i);
      System.out.println("Type ID: " + i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ParameterList ::= ParameterList COMMA Type ID 
            {
              ParametersNode RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParametersNode pl = (ParametersNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types.Type t = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new ParametersNode(t, i, pl);
      System.out.println("ParameterList -> ParameterList COMMA Type ID: " + i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Function ::= Type ID L_PAREN ParameterList R_PAREN L_BRACE StatementList R_BRACE 
            {
              FunctionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Types.Type t = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParametersNode pl = (ParametersNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode sl = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = new FunctionNode(t, pl, sl); 
      System.out.println("Function -> Type ID L_PAREN ParameterList R_PAREN L_BRACE StatementList R_BRACE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunctionList ::= FunctionList NEWLINE Function 
            {
              StatementNode RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StatementNode fl = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionNode f = (FunctionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // List<Node> children = new ArrayList<Node>();
      // children.add(fl);
      // children.add(f);
      // RESULT = new StatementNode(children);
      System.out.println("FunctionList -> FunctionList Function");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FunctionList ::= NEWLINE Function 
            {
              StatementNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionNode f = (FunctionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = f;
      System.out.println("FunctionList -> Function");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Functions ::= 
            {
              SectionNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Functions ::= FUNCTIONS L_BRACE FunctionList NEWLINE R_BRACE 
            {
              SectionNode RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StatementNode fl = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
     // RESULT = new SectionNode(fl);
     System.out.println("Functions -> FUNCTIONS L_BRACE FunctionList R_BRACE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Functions NEWLINE Map NEWLINE Reduce NEWLINE Main NEWLINE 
            {
              ProgramNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SectionNode f = (SectionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SectionNode m = (SectionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SectionNode r = (SectionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SectionNode n = (SectionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = new ProgramNode(f, m, r, n);
      System.out.println("PROGRAM");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

