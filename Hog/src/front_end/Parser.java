
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 13 13:34:22 EDT 2012
//----------------------------------------------------

package front_end;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import util.ast.node.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 13 13:34:22 EDT 2012
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\006\000\002\003" +
    "\006\000\002\003\002\000\002\004\003\000\002\004\004" +
    "\000\002\005\012\000\002\006\006\000\002\006\004\000" +
    "\002\006\002\000\002\007\007\000\002\010\007\000\002" +
    "\011\017\000\002\012\006\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\002" +
    "\000\002\014\003\000\002\014\004\000\002\020\003\000" +
    "\002\020\005\000\002\022\005\000\002\022\003\000\002" +
    "\024\005\000\002\024\003\000\002\025\003\000\002\025" +
    "\005\000\002\025\005\000\002\026\003\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\027\003\000\002\027\005\000\002\027\005\000\002" +
    "\030\003\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\031\003\000\002\031\006\000\002\023\004" +
    "\000\002\023\004\000\002\023\003\000\002\032\003\000" +
    "\002\032\004\000\002\032\004\000\002\033\003\000\002" +
    "\033\010\000\002\033\003\000\002\033\003\000\002\033" +
    "\005\000\002\034\003\000\002\034\005\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\015\011\000" +
    "\002\015\007\000\002\037\007\000\002\037\002\000\002" +
    "\040\004\000\002\040\002\000\002\016\007\000\002\016" +
    "\013\000\002\016\011\000\002\017\005\000\002\017\005" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\006\060\005\062\ufffe\001\002\000\004\002" +
    "\261\001\002\000\004\064\240\001\002\000\004\062\010" +
    "\001\002\000\004\063\225\001\002\000\004\070\011\001" +
    "\002\000\014\024\136\025\135\026\133\027\137\031\140" +
    "\001\002\000\004\064\013\001\002\000\044\004\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\043\uffef\044\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\054\uffef\057\uffef\065" +
    "\uffef\070\uffef\075\uffef\001\002\000\044\004\055\035\047" +
    "\036\030\037\032\040\037\041\026\043\044\044\051\047" +
    "\023\050\017\051\053\052\040\054\027\057\025\065\033" +
    "\070\031\075\043\001\002\000\052\005\207\006\210\010" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\045\uffd3\046" +
    "\uffd3\053\uffd3\071\uffd3\072\uffd3\075\uffd3\001\002\000\052" +
    "\005\uffcd\006\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\045\uffcd\046\uffcd\053\uffcd\071\uffcd\072\uffcd\075" +
    "\uffcd\001\002\000\004\070\203\001\002\000\052\005\uffd2" +
    "\006\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\045\uffd2\046\uffd2\053\uffd2\071\uffd2\072\uffd2\075\uffd2\001" +
    "\002\000\016\045\201\046\uffe9\053\uffe9\071\uffe9\072\uffe9" +
    "\075\uffe9\001\002\000\014\046\177\053\uffec\071\uffec\072" +
    "\uffec\075\uffec\001\002\000\022\004\055\035\047\036\030" +
    "\037\032\040\037\041\026\047\023\070\031\001\002\000" +
    "\044\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\045\uffdb\046" +
    "\uffdb\053\uffdb\071\uffdb\072\uffdb\075\uffdb\001\002\000\004" +
    "\070\172\001\002\000\052\005\uffc6\006\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\045\uffc6\046\uffc6\053" +
    "\uffc6\071\uffc6\072\uffc6\075\uffc6\001\002\000\004\070\155" +
    "\001\002\000\054\005\uffcf\006\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\033\145\045\uffcf\046\uffcf\053" +
    "\uffcf\071\uffcf\072\uffcf\075\uffcf\001\002\000\034\004\055" +
    "\024\136\025\135\026\133\027\137\031\140\035\047\036" +
    "\030\037\032\040\037\041\026\047\023\070\031\001\002" +
    "\000\052\005\uffc8\006\uffc8\010\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\045\uffc8\046\uffc8\053\uffc8\071\uffc8\072" +
    "\uffc8\075\uffc8\001\002\000\004\063\ufff7\001\002\000\046" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\131\045\uffd7" +
    "\046\uffd7\053\uffd7\071\uffd7\072\uffd7\075\uffd7\001\002\000" +
    "\044\004\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\043\ufff3\044\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\054" +
    "\ufff3\057\ufff3\065\ufff3\070\ufff3\075\ufff3\001\002\000\044" +
    "\004\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\043" +
    "\ufff0\044\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\054\ufff0" +
    "\057\ufff0\065\ufff0\070\ufff0\075\ufff0\001\002\000\052\005" +
    "\uffc7\006\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\045\uffc7\046\uffc7\053\uffc7\071\uffc7\072\uffc7\075\uffc7" +
    "\001\002\000\004\070\123\001\002\000\032\015\114\016" +
    "\113\017\115\020\112\021\uffe6\022\uffe6\045\uffe6\046\uffe6" +
    "\053\uffe6\071\uffe6\072\uffe6\075\uffe6\001\002\000\022\021" +
    "\107\022\110\045\uffe7\046\uffe7\053\uffe7\071\uffe7\072\uffe7" +
    "\075\uffe7\001\002\000\044\004\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\041\uffee\043\uffee\044\uffee\047\uffee\050\uffee" +
    "\051\uffee\052\uffee\054\uffee\057\uffee\065\uffee\070\uffee\075" +
    "\uffee\001\002\000\004\073\105\001\002\000\044\004\ufff1" +
    "\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\043\ufff1\044" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\054\ufff1\057\ufff1" +
    "\065\ufff1\070\ufff1\075\ufff1\001\002\000\036\010\102\011" +
    "\101\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\045\uffe3\046\uffe3\053\uffe3\071\uffe3\072\uffe3\075\uffe3\001" +
    "\002\000\052\005\uffcc\006\uffcc\010\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\045\uffcc\046\uffcc\053\uffcc\071\uffcc" +
    "\072\uffcc\075\uffcc\001\002\000\044\010\uffde\011\uffde\012" +
    "\075\013\074\014\073\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\045\uffde\046\uffde\053\uffde\071\uffde\072" +
    "\uffde\075\uffde\001\002\000\004\073\071\001\002\000\044" +
    "\004\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\043" +
    "\ufff2\044\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\054\ufff2" +
    "\057\ufff2\065\ufff2\070\ufff2\075\ufff2\001\002\000\004\070" +
    "\061\001\002\000\004\075\060\001\002\000\022\004\055" +
    "\035\047\036\030\037\032\040\037\041\026\047\023\070" +
    "\031\001\002\000\046\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\045\uffd7\046\uffd7\053\uffd7\071\uffd7\072\uffd7" +
    "\075\uffd7\001\002\000\046\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\045\uffd5\046\uffd5\053\uffd5\071\uffd5\072" +
    "\uffd5\075\uffd5\001\002\000\044\004\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\043\uffed\044\uffed\047\uffed\050" +
    "\uffed\051\uffed\052\uffed\054\uffed\057\uffed\065\uffed\070\uffed" +
    "\075\uffed\001\002\000\022\004\055\035\047\036\030\037" +
    "\032\040\037\041\026\047\023\070\031\001\002\000\004" +
    "\072\063\001\002\000\022\004\055\035\047\036\030\037" +
    "\032\040\037\041\026\047\023\070\031\001\002\000\004" +
    "\072\065\001\002\000\022\004\055\035\047\036\030\037" +
    "\032\040\037\041\026\047\023\070\031\001\002\000\004" +
    "\071\067\001\002\000\002\001\002\000\044\004\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\043\uffbe\044\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\054\uffbe\057\uffbe\065" +
    "\uffbe\070\uffbe\075\uffbe\001\002\000\002\001\002\000\044" +
    "\004\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\043" +
    "\uffbb\044\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb" +
    "\057\uffbb\065\uffbb\070\uffbb\075\uffbb\001\002\000\022\004" +
    "\055\035\047\036\030\037\032\040\037\041\026\047\023" +
    "\070\031\001\002\000\022\004\055\035\047\036\030\037" +
    "\032\040\037\041\026\047\023\070\031\001\002\000\022" +
    "\004\055\035\047\036\030\037\032\040\037\041\026\047" +
    "\023\070\031\001\002\000\044\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\045\uffda\046\uffda\053\uffda\071\uffda\072\uffda" +
    "\075\uffda\001\002\000\044\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\045\uffd9\046\uffd9\053\uffd9\071\uffd9\072\uffd9\075" +
    "\uffd9\001\002\000\044\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\045\uffd8\046\uffd8\053\uffd8\071\uffd8\072\uffd8\075\uffd8" +
    "\001\002\000\022\004\055\035\047\036\030\037\032\040" +
    "\037\041\026\047\023\070\031\001\002\000\022\004\055" +
    "\035\047\036\030\037\032\040\037\041\026\047\023\070" +
    "\031\001\002\000\044\010\uffdc\011\uffdc\012\075\013\074" +
    "\014\073\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\045\uffdc\046\uffdc\053\uffdc\071\uffdc\072\uffdc\075\uffdc" +
    "\001\002\000\044\010\uffdd\011\uffdd\012\075\013\074\014" +
    "\073\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\045\uffdd\046\uffdd\053\uffdd\071\uffdd\072\uffdd\075\uffdd\001" +
    "\002\000\002\001\002\000\044\004\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\043\uffbc\044\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\054\uffbc\057\uffbc\065\uffbc\070\uffbc" +
    "\075\uffbc\001\002\000\022\004\055\035\047\036\030\037" +
    "\032\040\037\041\026\047\023\070\031\001\002\000\022" +
    "\004\055\035\047\036\030\037\032\040\037\041\026\047" +
    "\023\070\031\001\002\000\032\015\114\016\113\017\115" +
    "\020\112\021\uffe4\022\uffe4\045\uffe4\046\uffe4\053\uffe4\071" +
    "\uffe4\072\uffe4\075\uffe4\001\002\000\022\004\055\035\047" +
    "\036\030\037\032\040\037\041\026\047\023\070\031\001" +
    "\002\000\022\004\055\035\047\036\030\037\032\040\037" +
    "\041\026\047\023\070\031\001\002\000\022\004\055\035" +
    "\047\036\030\037\032\040\037\041\026\047\023\070\031" +
    "\001\002\000\022\004\055\035\047\036\030\037\032\040" +
    "\037\041\026\047\023\070\031\001\002\000\036\010\102" +
    "\011\101\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\045\uffe0\046\uffe0\053\uffe0\071\uffe0\072\uffe0\075\uffe0" +
    "\001\002\000\036\010\102\011\101\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\045\uffe2\046\uffe2\053\uffe2" +
    "\071\uffe2\072\uffe2\075\uffe2\001\002\000\036\010\102\011" +
    "\101\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\045\uffe1\046\uffe1\053\uffe1\071\uffe1\072\uffe1\075\uffe1\001" +
    "\002\000\036\010\102\011\101\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\045\uffdf\046\uffdf\053\uffdf\071" +
    "\uffdf\072\uffdf\075\uffdf\001\002\000\032\015\114\016\113" +
    "\017\115\020\112\021\uffe5\022\uffe5\045\uffe5\046\uffe5\053" +
    "\uffe5\071\uffe5\072\uffe5\075\uffe5\001\002\000\022\004\055" +
    "\035\047\036\030\037\032\040\037\041\026\047\023\070" +
    "\031\001\002\000\004\053\125\001\002\000\022\004\055" +
    "\035\047\036\030\037\032\040\037\041\026\047\023\070" +
    "\031\001\002\000\004\071\127\001\002\000\002\001\002" +
    "\000\044\004\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\043\uffbd\044\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\054\uffbd\057\uffbd\065\uffbd\070\uffbd\075\uffbd\001\002\000" +
    "\022\004\055\035\047\036\030\037\032\040\037\041\026" +
    "\047\023\070\031\001\002\000\012\053\uffeb\071\uffeb\072" +
    "\uffeb\075\uffeb\001\002\000\010\036\uffb7\071\uffb7\074\uffb7" +
    "\001\002\000\004\071\143\001\002\000\010\036\uffb8\071" +
    "\uffb8\074\uffb8\001\002\000\010\036\uffb9\071\uffb9\074\uffb9" +
    "\001\002\000\010\036\uffb6\071\uffb6\074\uffb6\001\002\000" +
    "\010\036\uffba\071\uffba\074\uffba\001\002\000\004\071\142" +
    "\001\002\000\052\005\uffcb\006\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\045\uffcb\046\uffcb\053\uffcb\071" +
    "\uffcb\072\uffcb\075\uffcb\001\002\000\022\004\055\035\047" +
    "\036\030\037\032\040\037\041\026\047\023\070\031\001" +
    "\002\000\046\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\045\uffd6\046\uffd6\053\uffd6\071\uffd6\072\uffd6\075\uffd6" +
    "\001\002\000\004\036\146\001\002\000\004\070\147\001" +
    "\002\000\004\036\150\001\002\000\006\071\uffca\074\153" +
    "\001\002\000\004\071\152\001\002\000\052\005\uffce\006" +
    "\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\045" +
    "\uffce\046\uffce\053\uffce\071\uffce\072\uffce\075\uffce\001\002" +
    "\000\004\036\150\001\002\000\004\071\uffc9\001\002\000" +
    "\022\004\055\035\047\036\030\037\032\040\037\041\026" +
    "\047\023\070\031\001\002\000\004\071\157\001\002\000" +
    "\002\001\002\000\050\004\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\043\uffc2\044\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\054\uffc2\055\uffc2\056\162\057\uffc2\065\uffc2" +
    "\070\uffc2\075\uffc2\001\002\000\046\004\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\043\uffc0\044\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\054\uffc0\055\167\057\uffc0\065" +
    "\uffc0\070\uffc0\075\uffc0\001\002\000\004\070\163\001\002" +
    "\000\022\004\055\035\047\036\030\037\032\040\037\041" +
    "\026\047\023\070\031\001\002\000\004\071\165\001\002" +
    "\000\050\004\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\043\uffc2\044\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\054\uffc2\055\uffc2\056\162\057\uffc2\065\uffc2\070\uffc2\075" +
    "\uffc2\001\002\000\046\004\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\043\uffc3\044\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\054\uffc3\055\uffc3\057\uffc3\065\uffc3\070\uffc3" +
    "\075\uffc3\001\002\000\002\001\002\000\044\004\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\043\uffc5\044\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5\057\uffc5\065" +
    "\uffc5\070\uffc5\075\uffc5\001\002\000\044\004\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\043\uffc1\044\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\052\uffc1\054\uffc1\057\uffc1\065\uffc1" +
    "\070\uffc1\075\uffc1\001\002\000\022\004\055\035\047\036" +
    "\030\037\032\040\037\041\026\047\023\070\031\001\002" +
    "\000\004\071\174\001\002\000\002\001\002\000\044\004" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4" +
    "\044\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\057" +
    "\uffc4\065\uffc4\070\uffc4\075\uffc4\001\002\000\046\010\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\045\uffd4\046\uffd4" +
    "\053\uffd4\071\uffd4\072\uffd4\075\uffd4\001\002\000\022\004" +
    "\055\035\047\036\030\037\032\040\037\041\026\047\023" +
    "\070\031\001\002\000\016\045\201\046\uffea\053\uffea\071" +
    "\uffea\072\uffea\075\uffea\001\002\000\022\004\055\035\047" +
    "\036\030\037\032\040\037\041\026\047\023\070\031\001" +
    "\002\000\022\021\107\022\110\045\uffe8\046\uffe8\053\uffe8" +
    "\071\uffe8\072\uffe8\075\uffe8\001\002\000\022\004\055\035" +
    "\047\036\030\037\032\040\037\041\026\047\023\070\031" +
    "\001\002\000\004\071\205\001\002\000\002\001\002\000" +
    "\044\004\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\043\uffbf\044\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\054" +
    "\uffbf\057\uffbf\065\uffbf\070\uffbf\075\uffbf\001\002\000\052" +
    "\005\uffd0\006\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\045\uffd0\046\uffd0\053\uffd0\071\uffd0\072\uffd0\075" +
    "\uffd0\001\002\000\052\005\uffd1\006\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\045\uffd1\046\uffd1\053\uffd1" +
    "\071\uffd1\072\uffd1\075\uffd1\001\002\000\004\036\212\001" +
    "\002\000\004\074\213\001\002\000\014\024\136\025\135" +
    "\026\133\027\137\031\140\001\002\000\004\036\215\001" +
    "\002\000\004\071\216\001\002\000\004\032\217\001\002" +
    "\000\004\070\220\001\002\000\014\024\136\025\135\026" +
    "\133\027\137\031\140\001\002\000\004\074\222\001\002" +
    "\000\014\024\136\025\135\026\133\027\137\031\140\001" +
    "\002\000\004\071\224\001\002\000\004\064\ufff5\001\002" +
    "\000\004\070\011\001\002\000\004\061\227\001\002\000" +
    "\004\064\231\001\002\000\004\002\000\001\002\000\044" +
    "\004\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\043" +
    "\uffef\044\uffef\047\uffef\050\uffef\051\uffef\052\uffef\054\uffef" +
    "\057\uffef\065\uffef\070\uffef\075\uffef\001\002\000\044\004" +
    "\055\035\047\036\030\037\032\040\037\041\026\043\044" +
    "\044\051\047\023\050\017\051\053\052\040\054\027\057" +
    "\025\065\233\070\031\075\043\001\002\000\004\002\ufff4" +
    "\001\002\000\004\064\235\001\002\000\044\004\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\043\uffef\044\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\054\uffef\057\uffef\065" +
    "\uffef\070\uffef\075\uffef\001\002\000\044\004\055\035\047" +
    "\036\030\037\032\040\037\041\026\043\044\044\051\047" +
    "\023\050\017\051\053\052\040\054\027\057\025\065\237" +
    "\070\031\075\043\001\002\000\004\061\ufff6\001\002\000" +
    "\014\024\136\025\135\026\133\027\137\031\140\001\002" +
    "\000\016\024\136\025\135\026\133\027\137\031\140\065" +
    "\260\001\002\000\016\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\031\ufffd\065\ufffd\001\002\000\004\036\244\001\002\000" +
    "\004\070\245\001\002\000\016\024\136\025\135\026\133" +
    "\027\137\031\140\071\ufff8\001\002\000\004\071\253\001" +
    "\002\000\004\036\250\001\002\000\006\071\ufff9\074\251" +
    "\001\002\000\016\024\136\025\135\026\133\027\137\031" +
    "\140\071\ufff8\001\002\000\004\071\ufffa\001\002\000\004" +
    "\064\254\001\002\000\044\004\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\041\uffef\043\uffef\044\uffef\047\uffef\050\uffef" +
    "\051\uffef\052\uffef\054\uffef\057\uffef\065\uffef\070\uffef\075" +
    "\uffef\001\002\000\044\004\055\035\047\036\030\037\032" +
    "\040\037\041\026\043\044\044\051\047\023\050\017\051" +
    "\053\052\040\054\027\057\025\065\256\070\031\075\043" +
    "\001\002\000\016\024\ufffb\025\ufffb\026\ufffb\027\ufffb\031" +
    "\ufffb\065\ufffb\001\002\000\016\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\031\ufffc\065\ufffc\001\002\000\004\062\uffff\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\006\001\001\000\004" +
    "\010\225\001\001\000\004\011\011\001\001\000\004\021" +
    "\210\001\001\000\002\001\001\000\004\013\013\001\001" +
    "\000\042\014\034\015\051\016\044\017\035\020\053\022" +
    "\021\023\033\024\020\025\041\026\040\027\045\030\047" +
    "\031\023\032\014\033\017\035\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\023\055\031" +
    "\175\032\014\033\017\035\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\020\140\021\133\022\021\023\033" +
    "\024\020\025\041\026\040\027\045\030\047\031\023\032" +
    "\014\033\017\035\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\023\055\031\056\032\014" +
    "\033\017\035\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\020\061\022\021\023\033" +
    "\024\020\025\041\026\040\027\045\030\047\031\023\032" +
    "\014\033\017\035\015\001\001\000\002\001\001\000\032" +
    "\020\063\022\021\023\033\024\020\025\041\026\040\027" +
    "\045\030\047\031\023\032\014\033\017\035\015\001\001" +
    "\000\002\001\001\000\032\020\065\022\021\023\033\024" +
    "\020\025\041\026\040\027\045\030\047\031\023\032\014" +
    "\033\017\035\015\001\001\000\002\001\001\000\004\036" +
    "\067\001\001\000\002\001\001\000\004\036\071\001\001" +
    "\000\002\001\001\000\014\023\055\031\077\032\014\033" +
    "\017\035\015\001\001\000\014\023\055\031\076\032\014" +
    "\033\017\035\015\001\001\000\014\023\055\031\075\032" +
    "\014\033\017\035\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\023\055\030\103\031" +
    "\023\032\014\033\017\035\015\001\001\000\016\023\055" +
    "\030\102\031\023\032\014\033\017\035\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\105\001\001" +
    "\000\002\001\001\000\022\023\055\026\121\027\045\030" +
    "\047\031\023\032\014\033\017\035\015\001\001\000\022" +
    "\023\055\026\110\027\045\030\047\031\023\032\014\033" +
    "\017\035\015\001\001\000\002\001\001\000\020\023\055" +
    "\027\120\030\047\031\023\032\014\033\017\035\015\001" +
    "\001\000\020\023\055\027\117\030\047\031\023\032\014" +
    "\033\017\035\015\001\001\000\020\023\055\027\116\030" +
    "\047\031\023\032\014\033\017\035\015\001\001\000\020" +
    "\023\055\027\115\030\047\031\023\032\014\033\017\035" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\020" +
    "\123\022\021\023\033\024\020\025\041\026\040\027\045" +
    "\030\047\031\023\032\014\033\017\035\015\001\001\000" +
    "\002\001\001\000\032\020\125\022\021\023\033\024\020" +
    "\025\041\026\040\027\045\030\047\031\023\032\014\033" +
    "\017\035\015\001\001\000\002\001\001\000\004\036\127" +
    "\001\001\000\002\001\001\000\032\020\131\022\021\023" +
    "\033\024\020\025\041\026\040\027\045\030\047\031\023" +
    "\032\014\033\017\035\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\023\055\031\143\032\014" +
    "\033\017\035\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\153\001\001\000\002\001\001\000\032\020\155\022\021" +
    "\023\033\024\020\025\041\026\040\027\045\030\047\031" +
    "\023\032\014\033\017\035\015\001\001\000\002\001\001" +
    "\000\004\036\157\001\001\000\004\037\160\001\001\000" +
    "\004\040\167\001\001\000\002\001\001\000\032\020\163" +
    "\022\021\023\033\024\020\025\041\026\040\027\045\030" +
    "\047\031\023\032\014\033\017\035\015\001\001\000\002" +
    "\001\001\000\004\037\165\001\001\000\002\001\001\000" +
    "\004\036\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\020\172\022\021\023\033\024\020\025\041\026" +
    "\040\027\045\030\047\031\023\032\014\033\017\035\015" +
    "\001\001\000\002\001\001\000\004\036\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\023\055\024\177" +
    "\025\041\026\040\027\045\030\047\031\023\032\014\033" +
    "\017\035\015\001\001\000\002\001\001\000\024\023\055" +
    "\025\201\026\040\027\045\030\047\031\023\032\014\033" +
    "\017\035\015\001\001\000\002\001\001\000\032\020\203" +
    "\022\021\023\033\024\020\025\041\026\040\027\045\030" +
    "\047\031\023\032\014\033\017\035\015\001\001\000\002" +
    "\001\001\000\004\036\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\220\001\001\000\002\001\001\000\004\021\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\233" +
    "\001\001\000\004\012\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\231\001\001\000\042\014\034" +
    "\015\051\016\044\017\035\020\053\022\021\023\033\024" +
    "\020\025\041\026\040\027\045\030\047\031\023\032\014" +
    "\033\017\035\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\235\001\001\000\042\014\034\015\051" +
    "\016\044\017\035\020\053\022\021\023\033\024\020\025" +
    "\041\026\040\027\045\030\047\031\023\032\014\033\017" +
    "\035\015\001\001\000\002\001\001\000\010\004\240\005" +
    "\241\021\242\001\001\000\006\005\256\021\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\245\021\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\251\021\246\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\254" +
    "\001\001\000\042\014\034\015\051\016\044\017\035\020" +
    "\053\022\021\023\033\024\020\025\041\026\040\027\045" +
    "\030\047\031\023\032\014\033\017\035\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return lexer.next_token();
  
    }


    private Lexer lexer;
    private File file;
    public Parser( File file ) {
      this();
      this.file = file;
      try {
        lexer = new Lexer( new FileReader( file ) );
      }
      catch ( IOException exception ) {
        throw new Error( "Unable to open file \"" + file + "\"" );
      }
    }
  
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    Hashtable table = new Hashtable();
  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Type ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Type ::= TEXT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Type ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LabeledStatement ::= DEFAULT COL Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabeledStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LabeledStatement ::= CASE COL Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabeledStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IterationStatement ::= FOREACH L_PAREN Expression IN Expression R_PAREN Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IterationStatement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IterationStatement ::= FOR L_PAREN Expression SEMICOL Expression SEMICOL Expression R_PAREN Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IterationStatement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IterationStatement ::= WHILE L_PAREN Expression R_PAREN Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IterationStatement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ElseStatement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ElseStatement ::= ELSE Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ElseIfStatement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseIfStatement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ElseIfStatement ::= ELSEIF L_PAREN Expression R_PAREN ElseIfStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseIfStatement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SelectionStatement ::= SWITCH L_PAREN Expression R_PAREN Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectionStatement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SelectionStatement ::= IF L_PAREN Expression R_PAREN Statement ElseIfStatement ElseStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectionStatement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Constant ::= BOOL_CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Constant ::= REAL_CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Constant ::= INT_CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Parameters ::= ID COMMA Parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Parameters ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PrimaryExpression ::= L_PAREN Expression R_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PrimaryExpression ::= TEXT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PrimaryExpression ::= Constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PrimaryExpression ::= ID DOT ID L_PAREN Parameters R_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PrimaryExpression ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PostfixExpression ::= PostfixExpression DECR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PostfixExpression ::= PostfixExpression INCR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PostfixExpression ::= PrimaryExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // UnaryExpression ::= PostfixExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // UnaryExpression ::= NOT CastExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // UnaryExpression ::= UMINUS CastExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CastExpression ::= L_PAREN Type R_PAREN CastExpression 
            {
              Object RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CastExpression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CastExpression ::= UnaryExpression 
            {
              Object RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ue = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ue; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CastExpression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MultiplicativeExpression ::= MultiplicativeExpression MOD CastExpression 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultiplicativeExpressionNode(BiOpNode.OpType.MOD, me, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MultiplicativeExpression ::= MultiplicativeExpression DIVIDE CastExpression 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultiplicativeExpressionNode(BiOpNode.OpType.DIVIDE, me, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MultiplicativeExpression ::= MultiplicativeExpression TIMES CastExpression 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultiplicativeExpressionNode(BiOpNode.OpType.TIMES, me, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MultiplicativeExpression ::= CastExpression 
            {
              Object RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ce; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
       Node meNode = (Node) me;
       Node aeNode = (Node) ae;
       RESULT = new AdditiveExpressionNode(BiOpNode.OpType.MINUS, ae, me); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AdditiveExpressionNode(BiOpNode.OpType.PLUS, ae, me); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AdditiveExpression ::= MultiplicativeExpression 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = me;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RelationalExpression ::= RelationalExpression GRTR_EQL AdditiveExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RelationalExpression ::= RelationalExpression LESS_EQL AdditiveExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RelationalExpression ::= RelationalExpression GRTR AdditiveExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RelationalExpression ::= RelationalExpression LESS AdditiveExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RelationalExpression ::= AdditiveExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EqualityExpression ::= EqualityExpression NOT_EQLS RelationalExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EqualityExpression ::= EqualityExpression DBL_EQLS RelationalExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EqualityExpression ::= RelationalExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LogicalTerm ::= EqualityExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalTerm",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LogicalTerm ::= LogicalTerm AND EqualityExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalTerm",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LogicalExpression ::= LogicalTerm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LogicalExpression ::= LogicalExpression OR LogicalTerm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expression ::= UnaryExpression ASSIGN Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expression ::= LogicalExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ExpressionStatement ::= Expression NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStatement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ExpressionStatement ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStatement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // StatementList ::= StatementList LabeledStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // StatementList ::= StatementList IterationStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // StatementList ::= StatementList SelectionStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // StatementList ::= StatementList ExpressionStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Main ::= MAIN L_BRACE StatementList R_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SectionType ::= L_PAREN Type ID COMMA Type ID R_PAREN ARROW L_PAREN Type COMMA Type R_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SectionType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Reduce ::= REDUCE SectionType L_BRACE StatementList R_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Reduce",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Map ::= MAP SectionType L_BRACE StatementList R_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Map",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ParameterList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ParameterList ::= Type ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ParameterList ::= Type ID COMMA ParameterList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Function ::= Type ID L_PAREN ParameterList R_PAREN L_BRACE StatementList R_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunctionList ::= FunctionList Function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FunctionList ::= Function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Functions ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Functions ::= FUNCTIONS L_BRACE FunctionList R_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Functions Map Reduce Main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

