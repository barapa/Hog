
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 18 12:23:12 EDT 2012
//----------------------------------------------------

package front_end;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import util.ast.node.*;
import util.type.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 18 12:23:12 EDT 2012
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\005\011\000\002\006" +
    "\007\000\002\006\002\000\002\015\004\000\002\015\005" +
    "\000\002\040\012\000\002\041\006\000\002\041\004\000" +
    "\002\041\002\000\002\010\007\000\002\011\007\000\002" +
    "\012\017\000\002\007\006\000\002\021\004\000\002\021" +
    "\005\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\004\000\002\014\002\000\002" +
    "\014\003\000\002\030\003\000\002\030\005\000\002\025" +
    "\005\000\002\025\003\000\002\026\005\000\002\026\003" +
    "\000\002\024\003\000\002\024\005\000\002\024\005\000" +
    "\002\027\003\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\031\003\000\002\031" +
    "\005\000\002\031\005\000\002\032\003\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\033\003\000" +
    "\002\033\006\000\002\034\004\000\002\034\003\000\002" +
    "\043\003\000\002\043\003\000\002\035\003\000\002\035" +
    "\006\000\002\035\005\000\002\035\005\000\002\035\006" +
    "\000\002\035\004\000\002\035\004\000\002\003\003\000" +
    "\002\003\005\000\002\036\003\000\002\036\003\000\002" +
    "\036\005\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\020\011\000\002\020\007" +
    "\000\002\022\010\000\002\022\002\000\002\023\006\000" +
    "\002\023\003\000\002\016\007\000\002\016\013\000\002" +
    "\016\011\000\002\017\006\000\002\017\005\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\004\006\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\006\060\005\077\ufffe\001\002\000\004\002" +
    "\320\001\002\000\004\066\274\001\002\000\004\077\007" +
    "\001\002\000\004\062\011\001\002\000\004\077\257\001" +
    "\002\000\004\072\012\001\002\000\026\022\225\023\224" +
    "\024\215\025\226\026\227\100\216\101\214\102\222\103" +
    "\221\104\223\001\002\000\004\066\014\001\002\000\004" +
    "\077\015\001\002\000\054\006\037\007\024\027\027\035" +
    "\044\036\036\037\042\040\056\041\062\042\022\043\047" +
    "\044\054\047\031\050\052\051\026\052\051\054\035\056" +
    "\uffe9\057\050\067\uffe9\072\023\077\uffe9\001\002\000\006" +
    "\067\017\077\020\001\002\000\004\077\ufff7\001\002\000" +
    "\054\006\037\007\024\027\027\035\044\036\036\037\042" +
    "\040\056\041\062\042\022\043\047\044\054\047\031\050" +
    "\052\051\026\052\051\054\035\056\uffe9\057\050\067\uffe9" +
    "\072\023\077\uffe9\001\002\000\074\004\uffc2\005\uffc2\010" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\027\uffc2\031\uffc2\033\uffc2\045" +
    "\uffc2\046\uffc2\053\uffc2\056\uffc2\066\uffc2\067\uffc2\070\uffc2" +
    "\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077" +
    "\uffc2\001\002\000\022\027\027\035\044\036\036\037\042" +
    "\040\056\041\062\047\031\072\023\001\002\000\046\022" +
    "\225\023\224\024\215\025\226\026\227\027\027\035\044" +
    "\036\036\037\042\040\056\041\062\047\031\072\023\100" +
    "\216\101\214\102\222\103\221\104\223\001\002\000\010" +
    "\056\uffec\067\uffec\077\uffec\001\002\000\010\056\ufff1\067" +
    "\ufff1\077\ufff1\001\002\000\022\027\027\035\044\036\036" +
    "\037\042\040\056\041\062\047\031\072\023\001\002\000" +
    "\022\027\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\047\uffce\072\uffce\001\002\000\060\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\027\uffd6\031\uffd6\045\uffd6\046\uffd6\053\uffd6\056\uffd6\066" +
    "\uffd6\067\uffd6\071\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6" +
    "\077\uffd6\001\002\000\022\027\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\047\uffcd\072\uffcd\001\002\000\060" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\202\027\uffd2\031\uffd2\045\uffd2" +
    "\046\uffd2\053\uffd2\056\uffd2\066\uffd2\067\uffd2\071\uffd2\073" +
    "\uffd2\074\uffd2\076\uffd2\077\uffd2\001\002\000\052\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\027\113\031" +
    "\112\045\uffde\046\uffde\053\uffde\056\uffde\066\uffde\067\uffde" +
    "\071\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde\001" +
    "\002\000\074\004\uffcc\005\uffcc\010\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\027\uffcc\031\uffcc\033\uffcc\045\uffcc\046\uffcc\053\uffcc" +
    "\056\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073" +
    "\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\001\002\000\022" +
    "\027\027\035\044\036\036\037\042\040\056\041\062\047" +
    "\031\072\023\001\002\000\074\004\uffc3\005\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\027\uffc3\031\uffc3\033\uffc3\045\uffc3" +
    "\046\uffc3\053\uffc3\056\uffc3\066\uffc3\067\uffc3\070\uffc3\071" +
    "\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3" +
    "\001\002\000\022\027\027\035\044\036\036\037\042\040" +
    "\056\041\062\047\031\072\023\001\002\000\060\010\117" +
    "\011\116\012\115\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\027\uffd9\031\uffd9\045\uffd9\046\uffd9\053\uffd9" +
    "\056\uffd9\066\uffd9\067\uffd9\071\uffd9\073\uffd9\074\uffd9\075" +
    "\uffd9\076\uffd9\077\uffd9\001\002\000\010\056\uffee\067\uffee" +
    "\077\uffee\001\002\000\074\004\uffc0\005\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\027\uffc0\031\uffc0\033\uffc0\045\uffc0\046" +
    "\uffc0\053\uffc0\056\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0" +
    "\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\001" +
    "\002\000\032\045\131\046\uffe4\053\uffe4\056\uffe4\066\uffe4" +
    "\067\uffe4\071\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\077" +
    "\uffe4\001\002\000\074\004\uffbd\005\uffbd\010\uffbd\011\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\027\uffbd\031\uffbd\033\uffbd\045\uffbd\046\uffbd" +
    "\053\uffbd\056\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072" +
    "\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\001\002" +
    "\000\036\017\133\020\134\045\uffe2\046\uffe2\053\uffe2\056" +
    "\uffe2\066\uffe2\067\uffe2\071\uffe2\073\uffe2\074\uffe2\075\uffe2" +
    "\076\uffe2\077\uffe2\001\002\000\010\056\uffed\067\uffed\077" +
    "\uffed\001\002\000\010\056\uffeb\067\uffeb\077\uffeb\001\002" +
    "\000\022\027\027\035\044\036\036\037\042\040\056\041" +
    "\062\047\031\072\023\001\002\000\022\027\027\035\044" +
    "\036\036\037\042\040\056\041\062\047\031\072\023\001" +
    "\002\000\022\027\027\035\044\036\036\037\042\040\056" +
    "\041\062\047\031\072\023\001\002\000\010\056\ufff0\067" +
    "\ufff0\077\ufff0\001\002\000\004\075\140\001\002\000\022" +
    "\027\027\035\044\036\036\037\042\040\056\041\062\047" +
    "\031\072\023\001\002\000\074\004\uffbf\005\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\027\uffbf\031\uffbf\033\uffbf\045\uffbf" +
    "\046\uffbf\053\uffbf\056\uffbf\066\uffbf\067\uffbf\070\uffbf\071" +
    "\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf" +
    "\001\002\000\026\046\127\053\uffe7\056\uffe7\066\uffe7\067" +
    "\uffe7\071\uffe7\073\uffe7\074\uffe7\076\uffe7\077\uffe7\001\002" +
    "\000\010\056\ufff2\067\ufff2\077\ufff2\001\002\000\010\056" +
    "\uffe8\067\uffe8\077\uffe8\001\002\000\074\004\uffbe\005\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\027\uffbe\031\uffbe\033\uffbe" +
    "\045\uffbe\046\uffbe\053\uffbe\056\uffbe\066\uffbe\067\uffbe\070" +
    "\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe" +
    "\077\uffbe\001\002\000\046\013\106\014\105\015\107\016" +
    "\104\017\uffe1\020\uffe1\045\uffe1\046\uffe1\053\uffe1\056\uffe1" +
    "\066\uffe1\067\uffe1\071\uffe1\073\uffe1\074\uffe1\075\uffe1\076" +
    "\uffe1\077\uffe1\001\002\000\010\056\uffef\067\uffef\077\uffef" +
    "\001\002\000\074\004\066\005\070\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\027\uffcf\031\uffcf\033\072\045\uffcf\046\uffcf\053" +
    "\uffcf\056\uffcf\066\uffcf\067\uffcf\070\067\071\uffcf\072\071" +
    "\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\001\002\000" +
    "\074\004\uffc6\005\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\027" +
    "\uffc6\031\uffc6\033\uffc6\045\uffc6\046\uffc6\053\uffc6\056\uffc6" +
    "\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074" +
    "\uffc6\075\uffc6\076\uffc6\077\uffc6\001\002\000\022\027\027" +
    "\035\044\036\036\037\042\040\056\041\062\047\031\072" +
    "\023\001\002\000\074\004\uffc7\005\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\027\uffc7\031\uffc7\033\uffc7\045\uffc7\046\uffc7" +
    "\053\uffc7\056\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\072" +
    "\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\001\002" +
    "\000\024\027\027\035\044\036\036\037\042\040\056\041" +
    "\062\047\031\072\023\073\075\001\002\000\004\036\073" +
    "\001\002\000\074\004\uffca\005\uffca\010\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\027\uffca\031\uffca\033\uffca\045\uffca\046\uffca\053" +
    "\uffca\056\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca" +
    "\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\001\002\000" +
    "\006\073\100\076\077\001\002\000\074\004\uffc9\005\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\027\uffc9\031\uffc9\033\uffc9" +
    "\045\uffc9\046\uffc9\053\uffc9\056\uffc9\066\uffc9\067\uffc9\070" +
    "\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9" +
    "\077\uffc9\001\002\000\006\073\uffc5\076\uffc5\001\002\000" +
    "\022\027\027\035\044\036\036\037\042\040\056\041\062" +
    "\047\031\072\023\001\002\000\074\004\uffc8\005\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\027\uffc8\031\uffc8\033\uffc8\045" +
    "\uffc8\046\uffc8\053\uffc8\056\uffc8\066\uffc8\067\uffc8\070\uffc8" +
    "\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077" +
    "\uffc8\001\002\000\006\073\uffc4\076\uffc4\001\002\000\004" +
    "\071\103\001\002\000\074\004\uffcb\005\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\027\uffcb\031\uffcb\033\uffcb\045\uffcb\046" +
    "\uffcb\053\uffcb\056\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb" +
    "\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\001" +
    "\002\000\022\027\027\035\044\036\036\037\042\040\056" +
    "\041\062\047\031\072\023\001\002\000\022\027\027\035" +
    "\044\036\036\037\042\040\056\041\062\047\031\072\023" +
    "\001\002\000\022\027\027\035\044\036\036\037\042\040" +
    "\056\041\062\047\031\072\023\001\002\000\022\027\027" +
    "\035\044\036\036\037\042\040\056\041\062\047\031\072" +
    "\023\001\002\000\062\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\027" +
    "\uffd2\031\uffd2\045\uffd2\046\uffd2\053\uffd2\056\uffd2\066\uffd2" +
    "\067\uffd2\071\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077" +
    "\uffd2\001\002\000\052\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\027\113\031\112\045\uffdb\046\uffdb\053" +
    "\uffdb\056\uffdb\066\uffdb\067\uffdb\071\uffdb\073\uffdb\074\uffdb" +
    "\075\uffdb\076\uffdb\077\uffdb\001\002\000\022\027\027\035" +
    "\044\036\036\037\042\040\056\041\062\047\031\072\023" +
    "\001\002\000\022\027\027\035\044\036\036\037\042\040" +
    "\056\041\062\047\031\072\023\001\002\000\060\010\117" +
    "\011\116\012\115\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\027\uffd7\031\uffd7\045\uffd7\046\uffd7\053\uffd7" +
    "\056\uffd7\066\uffd7\067\uffd7\071\uffd7\073\uffd7\074\uffd7\075" +
    "\uffd7\076\uffd7\077\uffd7\001\002\000\022\027\027\035\044" +
    "\036\036\037\042\040\056\041\062\047\031\072\023\001" +
    "\002\000\022\027\027\035\044\036\036\037\042\040\056" +
    "\041\062\047\031\072\023\001\002\000\022\027\027\035" +
    "\044\036\036\037\042\040\056\041\062\047\031\072\023" +
    "\001\002\000\060\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\027\uffd5\031\uffd5" +
    "\045\uffd5\046\uffd5\053\uffd5\056\uffd5\066\uffd5\067\uffd5\071" +
    "\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\001\002" +
    "\000\060\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\027\uffd4\031\uffd4\045\uffd4" +
    "\046\uffd4\053\uffd4\056\uffd4\066\uffd4\067\uffd4\071\uffd4\073" +
    "\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\001\002\000\060" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\027\uffd3\031\uffd3\045\uffd3\046\uffd3" +
    "\053\uffd3\056\uffd3\066\uffd3\067\uffd3\071\uffd3\073\uffd3\074" +
    "\uffd3\075\uffd3\076\uffd3\077\uffd3\001\002\000\060\010\117" +
    "\011\116\012\115\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\027\uffd8\031\uffd8\045\uffd8\046\uffd8\053\uffd8" +
    "\056\uffd8\066\uffd8\067\uffd8\071\uffd8\073\uffd8\074\uffd8\075" +
    "\uffd8\076\uffd8\077\uffd8\001\002\000\052\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\027\113\031\112\045" +
    "\uffdd\046\uffdd\053\uffdd\056\uffdd\066\uffdd\067\uffdd\071\uffdd" +
    "\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\001\002\000" +
    "\052\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\027\113\031\112\045\uffdc\046\uffdc\053\uffdc\056\uffdc\066" +
    "\uffdc\067\uffdc\071\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc" +
    "\077\uffdc\001\002\000\052\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\017\uffda\020\uffda\027\113\031\112\045\uffda\046\uffda" +
    "\053\uffda\056\uffda\066\uffda\067\uffda\071\uffda\073\uffda\074" +
    "\uffda\075\uffda\076\uffda\077\uffda\001\002\000\022\027\027" +
    "\035\044\036\036\037\042\040\056\041\062\047\031\072" +
    "\023\001\002\000\032\045\131\046\uffe5\053\uffe5\056\uffe5" +
    "\066\uffe5\067\uffe5\071\uffe5\073\uffe5\074\uffe5\075\uffe5\076" +
    "\uffe5\077\uffe5\001\002\000\022\027\027\035\044\036\036" +
    "\037\042\040\056\041\062\047\031\072\023\001\002\000" +
    "\036\017\133\020\134\045\uffe3\046\uffe3\053\uffe3\056\uffe3" +
    "\066\uffe3\067\uffe3\071\uffe3\073\uffe3\074\uffe3\075\uffe3\076" +
    "\uffe3\077\uffe3\001\002\000\022\027\027\035\044\036\036" +
    "\037\042\040\056\041\062\047\031\072\023\001\002\000" +
    "\022\027\027\035\044\036\036\037\042\040\056\041\062" +
    "\047\031\072\023\001\002\000\046\013\106\014\105\015" +
    "\107\016\104\017\uffdf\020\uffdf\045\uffdf\046\uffdf\053\uffdf" +
    "\056\uffdf\066\uffdf\067\uffdf\071\uffdf\073\uffdf\074\uffdf\075" +
    "\uffdf\076\uffdf\077\uffdf\001\002\000\046\013\106\014\105" +
    "\015\107\016\104\017\uffe0\020\uffe0\045\uffe0\046\uffe0\053" +
    "\uffe0\056\uffe0\066\uffe0\067\uffe0\071\uffe0\073\uffe0\074\uffe0" +
    "\075\uffe0\076\uffe0\077\uffe0\001\002\000\062\010\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\027\uffd0\031\uffd0\045\uffd0\046\uffd0\053" +
    "\uffd0\056\uffd0\066\uffd0\067\uffd0\071\uffd0\073\uffd0\074\uffd0" +
    "\075\uffd0\076\uffd0\077\uffd0\001\002\000\054\006\037\007" +
    "\024\027\027\035\044\036\036\037\042\040\056\041\062" +
    "\042\022\043\047\044\054\047\031\050\052\051\026\052" +
    "\051\054\035\056\uffe9\057\050\067\uffe9\072\023\077\uffe9" +
    "\001\002\000\010\056\uffb2\067\uffb2\077\uffb2\001\002\000" +
    "\004\066\143\001\002\000\004\077\015\001\002\000\006" +
    "\067\145\077\020\001\002\000\010\056\uffb6\067\uffb6\077" +
    "\uffb6\001\002\000\004\053\147\001\002\000\022\027\027" +
    "\035\044\036\036\037\042\040\056\041\062\047\031\072" +
    "\023\001\002\000\004\066\151\001\002\000\004\077\015" +
    "\001\002\000\006\067\153\077\020\001\002\000\010\056" +
    "\uffb4\067\uffb4\077\uffb4\001\002\000\004\066\155\001\002" +
    "\000\004\077\015\001\002\000\006\067\157\077\020\001" +
    "\002\000\010\056\uffbb\067\uffbb\077\uffbb\001\002\000\010" +
    "\056\uffea\067\uffea\077\uffea\001\002\000\004\066\162\001" +
    "\002\000\004\077\015\001\002\000\006\067\164\077\020" +
    "\001\002\000\010\055\uffb9\056\166\077\uffb9\001\002\000" +
    "\006\055\174\077\176\001\002\000\022\027\027\035\044" +
    "\036\036\037\042\040\056\041\062\047\031\072\023\001" +
    "\002\000\004\066\170\001\002\000\004\077\015\001\002" +
    "\000\010\056\166\067\uffb9\077\020\001\002\000\004\067" +
    "\173\001\002\000\010\055\uffba\067\uffba\077\uffba\001\002" +
    "\000\004\066\177\001\002\000\010\056\uffbc\067\uffbc\077" +
    "\uffbc\001\002\000\010\056\uffb7\067\uffb7\077\uffb7\001\002" +
    "\000\004\077\015\001\002\000\006\067\201\077\020\001" +
    "\002\000\010\056\uffb8\067\uffb8\077\uffb8\001\002\000\022" +
    "\027\027\035\044\036\036\037\042\040\056\041\062\047" +
    "\031\072\023\001\002\000\024\053\uffe6\056\uffe6\066\uffe6" +
    "\067\uffe6\071\uffe6\073\uffe6\074\uffe6\076\uffe6\077\uffe6\001" +
    "\002\000\004\074\205\001\002\000\022\027\027\035\044" +
    "\036\036\037\042\040\056\041\062\047\031\072\023\001" +
    "\002\000\004\074\207\001\002\000\022\027\027\035\044" +
    "\036\036\037\042\040\056\041\062\047\031\072\023\001" +
    "\002\000\004\066\211\001\002\000\004\077\015\001\002" +
    "\000\006\067\213\077\020\001\002\000\010\056\uffb5\067" +
    "\uffb5\077\uffb5\001\002\000\014\013\uffa9\014\uffa9\036\uffa9" +
    "\073\uffa9\076\uffa9\001\002\000\012\014\uffae\036\uffae\073" +
    "\uffae\076\uffae\001\002\000\014\013\uffaa\014\uffaa\036\uffaa" +
    "\073\uffaa\076\uffaa\001\002\000\014\013\234\014\uffac\036" +
    "\uffac\073\uffac\076\uffac\001\002\000\004\073\232\001\002" +
    "\000\014\013\uffa7\014\uffa7\036\uffa7\073\uffa7\076\uffa7\001" +
    "\002\000\014\013\uffa8\014\uffa8\036\uffa8\073\uffa8\076\uffa8" +
    "\001\002\000\014\013\uffa6\014\uffa6\036\uffa6\073\uffa6\076" +
    "\uffa6\001\002\000\012\014\uffaf\036\uffaf\073\uffaf\076\uffaf" +
    "\001\002\000\012\014\uffb0\036\uffb0\073\uffb0\076\uffb0\001" +
    "\002\000\012\014\uffad\036\uffad\073\uffad\076\uffad\001\002" +
    "\000\012\014\uffb1\036\uffb1\073\uffb1\076\uffb1\001\002\000" +
    "\004\073\231\001\002\000\074\004\uffc1\005\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\027\uffc1\031\uffc1\033\uffc1\045\uffc1" +
    "\046\uffc1\053\uffc1\056\uffc1\066\uffc1\067\uffc1\070\uffc1\071" +
    "\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1" +
    "\001\002\000\022\027\027\035\044\036\036\037\042\040" +
    "\056\041\062\047\031\072\023\001\002\000\062\010\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\027\uffd1\031\uffd1\045\uffd1\046\uffd1" +
    "\053\uffd1\056\uffd1\066\uffd1\067\uffd1\071\uffd1\073\uffd1\074" +
    "\uffd1\075\uffd1\076\uffd1\077\uffd1\001\002\000\026\022\225" +
    "\023\224\024\215\025\226\026\227\100\216\101\214\102" +
    "\222\103\221\104\223\001\002\000\004\014\236\001\002" +
    "\000\014\013\uffab\014\uffab\036\uffab\073\uffab\076\uffab\001" +
    "\002\000\006\046\127\075\240\001\002\000\054\006\037" +
    "\007\024\027\027\035\044\036\036\037\042\040\056\041" +
    "\062\042\022\043\047\044\054\047\031\050\052\051\026" +
    "\052\051\054\035\056\uffe9\057\050\067\uffe9\072\023\077" +
    "\uffe9\001\002\000\010\056\uffb3\067\uffb3\077\uffb3\001\002" +
    "\000\010\056\ufff3\067\ufff3\077\ufff3\001\002\000\004\036" +
    "\244\001\002\000\004\076\245\001\002\000\026\022\225" +
    "\023\224\024\215\025\226\026\227\100\216\101\214\102" +
    "\222\103\221\104\223\001\002\000\004\036\247\001\002" +
    "\000\004\073\250\001\002\000\004\032\251\001\002\000" +
    "\004\072\252\001\002\000\026\022\225\023\224\024\215" +
    "\025\226\026\227\100\216\101\214\102\222\103\221\104" +
    "\223\001\002\000\004\076\254\001\002\000\026\022\225" +
    "\023\224\024\215\025\226\026\227\100\216\101\214\102" +
    "\222\103\221\104\223\001\002\000\004\073\256\001\002" +
    "\000\004\066\ufff5\001\002\000\004\063\260\001\002\000" +
    "\004\072\012\001\002\000\004\077\262\001\002\000\004" +
    "\061\263\001\002\000\004\066\265\001\002\000\004\002" +
    "\000\001\002\000\004\077\015\001\002\000\006\067\267" +
    "\077\020\001\002\000\004\002\ufff4\001\002\000\004\066" +
    "\271\001\002\000\004\077\015\001\002\000\006\067\273" +
    "\077\020\001\002\000\004\077\ufff6\001\002\000\004\077" +
    "\276\001\002\000\004\077\315\001\002\000\026\022\225" +
    "\023\224\024\215\025\226\026\227\100\216\101\214\102" +
    "\222\103\221\104\223\001\002\000\004\036\301\001\002" +
    "\000\004\077\ufffd\001\002\000\004\072\302\001\002\000" +
    "\032\022\225\023\224\024\215\025\226\026\227\073\ufff8" +
    "\076\ufff8\100\216\101\214\102\222\103\221\104\223\001" +
    "\002\000\004\036\314\001\002\000\006\073\306\076\305" +
    "\001\002\000\026\022\225\023\224\024\215\025\226\026" +
    "\227\100\216\101\214\102\222\103\221\104\223\001\002" +
    "\000\004\066\307\001\002\000\004\077\015\001\002\000" +
    "\006\067\311\077\020\001\002\000\004\077\ufffb\001\002" +
    "\000\004\036\313\001\002\000\006\073\ufffa\076\ufffa\001" +
    "\002\000\006\073\ufff9\076\ufff9\001\002\000\030\022\225" +
    "\023\224\024\215\025\226\026\227\067\317\100\216\101" +
    "\214\102\222\103\221\104\223\001\002\000\004\077\ufffc" +
    "\001\002\000\004\077\uffff\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\006\005\003\006\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\007" +
    "\001\001\000\002\001\001\000\004\012\012\001\001\000" +
    "\006\004\216\042\242\001\001\000\002\001\001\000\004" +
    "\021\015\001\001\000\050\002\045\013\241\014\024\016" +
    "\063\017\040\020\052\024\044\025\056\026\042\027\062" +
    "\030\060\031\032\032\037\033\027\034\031\035\064\036" +
    "\033\037\020\043\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\002\045\013\057\014\024\016\063\017" +
    "\040\020\052\024\044\025\056\026\042\027\062\030\060" +
    "\031\032\032\037\033\027\034\031\035\064\036\033\037" +
    "\020\043\054\001\001\000\002\001\001\000\032\024\044" +
    "\025\236\026\042\027\062\031\032\032\037\033\027\034" +
    "\107\035\064\036\033\037\020\043\054\001\001\000\040" +
    "\004\216\024\044\025\056\026\042\027\062\030\227\031" +
    "\032\032\037\033\027\034\031\035\064\036\033\037\020" +
    "\042\217\043\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\024\044\025\056\026\042\027\062\030\203" +
    "\031\032\032\037\033\027\034\031\035\064\036\033\037" +
    "\020\043\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\024\044\025\056\026\042\027\062" +
    "\030\160\031\032\032\037\033\027\034\031\035\064\036" +
    "\033\037\020\043\054\001\001\000\002\001\001\000\034" +
    "\024\044\025\056\026\042\027\062\030\157\031\032\032" +
    "\037\033\027\034\031\035\064\036\033\037\020\043\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\024\044\025" +
    "\056\026\042\027\062\030\153\031\032\032\037\033\027" +
    "\034\031\035\064\036\033\037\020\043\054\001\001\000" +
    "\034\024\044\025\056\026\042\027\062\030\145\031\032" +
    "\032\037\033\027\034\031\035\064\036\033\037\020\043" +
    "\054\001\001\000\034\024\044\025\056\026\042\027\062" +
    "\030\141\031\032\032\037\033\027\034\031\035\064\036" +
    "\033\037\020\043\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\033\136\034\107\035\064\036\033\037" +
    "\020\043\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\024\044\025\056\026\042\027\062\030" +
    "\101\031\032\032\037\033\027\034\031\035\064\036\033" +
    "\037\020\043\054\001\001\000\002\001\001\000\036\003" +
    "\073\024\044\025\056\026\042\027\062\030\075\031\032" +
    "\032\037\033\027\034\031\035\064\036\033\037\020\043" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\024" +
    "\044\025\056\026\042\027\062\030\100\031\032\032\037" +
    "\033\027\034\031\035\064\036\033\037\020\043\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\031\125\032\037\033\027\034" +
    "\107\035\064\036\033\037\020\043\054\001\001\000\022" +
    "\031\124\032\037\033\027\034\107\035\064\036\033\037" +
    "\020\043\054\001\001\000\022\031\123\032\037\033\027" +
    "\034\107\035\064\036\033\037\020\043\054\001\001\000" +
    "\022\031\110\032\037\033\027\034\107\035\064\036\033" +
    "\037\020\043\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\032\122\033\027\034\107\035\064\036\033" +
    "\037\020\043\054\001\001\000\020\032\113\033\027\034" +
    "\107\035\064\036\033\037\020\043\054\001\001\000\002" +
    "\001\001\000\016\033\121\034\107\035\064\036\033\037" +
    "\020\043\054\001\001\000\016\033\120\034\107\035\064" +
    "\036\033\037\020\043\054\001\001\000\016\033\117\034" +
    "\107\035\064\036\033\037\020\043\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\024\044\026\127\027\062\031\032\032\037\033" +
    "\027\034\107\035\064\036\033\037\020\043\054\001\001" +
    "\000\002\001\001\000\026\024\131\027\062\031\032\032" +
    "\037\033\027\034\107\035\064\036\033\037\020\043\054" +
    "\001\001\000\002\001\001\000\024\027\135\031\032\032" +
    "\037\033\027\034\107\035\064\036\033\037\020\043\054" +
    "\001\001\000\024\027\134\031\032\032\037\033\027\034" +
    "\107\035\064\036\033\037\020\043\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\002" +
    "\045\013\140\014\024\016\063\017\040\020\052\024\044" +
    "\025\056\026\042\027\062\030\060\031\032\032\037\033" +
    "\027\034\031\035\064\036\033\037\020\043\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\024\044\025\056\026\042\027\062\030\147\031" +
    "\032\032\037\033\027\034\031\035\064\036\033\037\020" +
    "\043\054\001\001\000\002\001\001\000\004\021\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\162" +
    "\001\001\000\002\001\001\000\004\022\164\001\001\000" +
    "\004\023\174\001\001\000\034\024\044\025\056\026\042" +
    "\027\062\030\166\031\032\032\037\033\027\034\031\035" +
    "\064\036\033\037\020\043\054\001\001\000\002\001\001" +
    "\000\004\021\170\001\001\000\004\022\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\024\044\025\056" +
    "\026\042\027\062\030\202\031\032\032\037\033\027\034" +
    "\031\035\064\036\033\037\020\043\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\024\044\025\056\026" +
    "\042\027\062\030\205\031\032\032\037\033\027\034\031" +
    "\035\064\036\033\037\020\043\054\001\001\000\002\001" +
    "\001\000\034\024\044\025\056\026\042\027\062\030\207" +
    "\031\032\032\037\033\027\034\031\035\064\036\033\037" +
    "\020\043\054\001\001\000\002\001\001\000\004\021\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\033\232\034\107\035\064\036\033\037\020" +
    "\043\054\001\001\000\002\001\001\000\006\004\216\042" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\002\045\013\240\014\024\016\063\017" +
    "\040\020\052\024\044\025\056\026\042\027\062\030\060" +
    "\031\032\032\037\033\027\034\031\035\064\036\033\037" +
    "\020\043\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\216\042" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\216\042\252\001" +
    "\001\000\002\001\001\000\006\004\216\042\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\260\001" +
    "\001\000\004\012\267\001\001\000\002\001\001\000\004" +
    "\007\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\274\001\001\000\002" +
    "\001\001\000\010\004\216\040\277\042\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\216\041\303\042\302\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\216\042\311\001\001\000\002" +
    "\001\001\000\004\021\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\216\040\315\042\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return lexer.next_token();
  
    }


    Lexer lexer;
    private File file;
    public Parser( File file ) {
      this();
      this.file = file;
      try {
        lexer = new Lexer( new FileReader( file ) );
      }
      catch ( IOException exception ) {
        throw new Error( "Unable to open file \"" + file + "\"" );
      }
    }
    
    public Parser(Lexer l) {
      super(l);
      lexer=l;
    }
  
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    Hashtable table = new Hashtable();
  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DerivedType ::= SET 
            {
              Object RESULT =null;
		
      System.out.println("DerivedType -> SET");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DerivedType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DerivedType ::= MULTISET 
            {
              Object RESULT =null;
		
      System.out.println("DerivedType -> MULTISET");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DerivedType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DerivedType ::= DICT 
            {
              Object RESULT =null;
		
      System.out.println("DerivedType -> DICT");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DerivedType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DerivedType ::= ITER 
            {
              Object RESULT =null;
		
      System.out.println("DerivedType -> ITER");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DerivedType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DerivedType ::= LIST 
            {
              Object RESULT =null;
		
      System.out.println("DerivedType -> LIST");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DerivedType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DerivedType ::= DerivedType LESS Type GRTR 
            {
              Object RESULT =null;
		
      System.out.println("DerivedType -> DerivedType L_ANGLE Type R_ANGLE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DerivedType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Type ::= DerivedType 
            {
              Types.Type RESULT =null;
		
      System.out.println("Type -> DerivedType");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Type ::= REAL 
            {
              Types.Type RESULT =null;
		
      // RESULT = Types.Type.REAL;
      System.out.println("Type -> REAL");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Type ::= INT 
            {
              Types.Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = Types.Type.INT;
      System.out.println("Type -> INT");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Type ::= BOOL 
            {
              Types.Type RESULT =null;
		
      // RESULT = Types.Type.BOOL;
      System.out.println("Type -> BOOL");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Type ::= TEXT 
            {
              Types.Type RESULT =null;
		
      // RESULT = Types.Type.TEXT;
      System.out.println("Type -> TEXT");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Type ::= VOID 
            {
              Types.Type RESULT =null;
		
      // RESULT = Types.Type.VOID;
      System.out.println("Type -> VOID");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LabeledStatement ::= DEFAULT COL Statement 
            {
              StatementNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      System.out.println("DEFAULT COL Statement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabeledStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LabeledStatement ::= CASE LogicalExpression COL Statement 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      System.out.println("CASE LogicalExpression COL Statement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabeledStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IterationStatement ::= FOREACH Expression IN Expression L_BRACE StatementList R_BRACE 
            {
              StatementNode RESULT =null;
		
      System.out.println("FOREACH L_PAREN Expression IN Expression R_PAREN Statement"); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IterationStatement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IterationStatement ::= FOR Expression SEMICOL Expression SEMICOL Expression L_BRACE StatementList R_BRACE 
            {
              StatementNode RESULT =null;
		
      System.out.println("FOR L_PAREN Expression SEMICOL Expression SEMICOL Expression R_PAREN Statement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IterationStatement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IterationStatement ::= WHILE Expression L_BRACE StatementList R_BRACE 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      System.out.println("WHILE L_PAREN Expression R_PAREN Statement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IterationStatement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ElseStatement ::= NEWLINE 
            {
              SelectionStatementNode RESULT =null;
		
      System.out.println("ElseStatement -> epsilon");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ElseStatement ::= ELSE L_BRACE StatementList R_BRACE 
            {
              SelectionStatementNode RESULT =null;
		
      // RESULT = new SelectionStatementNode(null, s, null);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStatement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ElseIfStatement ::= 
            {
              SelectionStatementNode RESULT =null;
		
      System.out.println("ElseIfStatement -> epsilon");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseIfStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ElseIfStatement ::= ELSEIF Expression L_BRACE StatementList ElseIfStatement R_BRACE 
            {
              SelectionStatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SelectionStatementNode elif = (SelectionStatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = new SelectionStatementNode(e, elif, null);
      System.out.println("ElseIfStatement -> ELSEIF L_PAREN Expression R_PAREN ElseIfStatement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseIfStatement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SelectionStatement ::= SWITCH Expression L_BRACE StatementList R_BRACE 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      System.out.println("SelectionStatement -> SWITCH L_PAREN Expression R_PAREN Statement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectionStatement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SelectionStatement ::= IF Expression L_BRACE StatementList R_BRACE ElseIfStatement ElseStatement 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SelectionStatementNode elif = (SelectionStatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SelectionStatementNode el = (SelectionStatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // SelectionStatementNode elseIfAndElse = new SelectionStatementNode(elif.getCondition(), elif, el);
      // RESULT = new SelectionStatementNode(e, s, elseIfAndElse);
      System.out.println("SelectionStatement -> IF L_PAREN Expression R_PAREN Statement ElseIfStatement ElseStatement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectionStatement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Constant ::= TEXT_LITERAL 
            {
              ExpressionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new ConstantNode(Types.Type.TEXT, t);
      System.out.println("Constant -> TEXT_LITERAL");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Constant ::= BOOL_CONST 
            {
              ExpressionNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new ConstantNode(Types.Type.BOOL, b);
      System.out.println("Constant -> BOOL_CONST");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Constant ::= REAL_CONST 
            {
              ExpressionNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new ConstantNode(Types.Type.REAL, d);
      System.out.println("Constant -> REAL_CONST");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Constant ::= INT_CONST 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new ConstantNode(Types.Type.INT, i);
      System.out.println("Constant -> INT_CONST: " + i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PrimaryExpression ::= L_PAREN Expression R_PAREN 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = e;
      System.out.println("PrimaryExpression -> L_PAREN Expression R_PAREN");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PrimaryExpression ::= Constant 
            {
              ExpressionNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = c;
      System.out.println("PrimaryExpression -> Constant"); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PrimaryExpression ::= ID 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new IdNode(i);
      System.out.println("PrimaryExpression -> ID: " + i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ArgumentExpressionList ::= ArgumentExpressionList COMMA Expression 
            {
              Object RESULT =null;
		
      System.out.println("ArgumentExpressionList -> ArgumentExpressionList COMMA Expression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentExpressionList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ArgumentExpressionList ::= Expression 
            {
              Object RESULT =null;
		
      System.out.println("ArgumentExpressionList -> Expression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentExpressionList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PostfixExpression ::= PostfixExpression DECR 
            {
              ExpressionNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode p = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = new UnOpNode(UnOpNode.OpType.DECR, p);
      System.out.println("PostfixExpression -> PostfixExpression DECR");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PostfixExpression ::= PostfixExpression INCR 
            {
              ExpressionNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode p = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = new UnOpNode(UnOpNode.OpType.INCR, p);
      System.out.println("PostfixExpression -> PostfixExpression INCR");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PostfixExpression ::= PostfixExpression L_PAREN ArgumentExpressionList R_PAREN 
            {
              ExpressionNode RESULT =null;
		
      System.out.println("PostfixExpression -> PostfixExpression L_PAREN ArgumentExpressionList R_PAREN"); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PostfixExpression ::= PostfixExpression L_PAREN R_PAREN 
            {
              ExpressionNode RESULT =null;
		
      System.out.println("PostfixExpression -> PostfixExpression L_PAREN R_PAREN"); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PostfixExpression ::= PostfixExpression DOT ID 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      System.out.println("PostfixExpression -> PostfixExpression DOT ID: " + i); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PostfixExpression ::= PostfixExpression L_BRKT Expression R_BRKT 
            {
              ExpressionNode RESULT =null;
		
      System.out.println("PostfixExpression -> PostfixExpression L_BRKT Expression R_BRKT"); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PostfixExpression ::= PrimaryExpression 
            {
              ExpressionNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode p = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = p;
      System.out.println("PostfixExpression -> PrimaryExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // UnaryOperator ::= NOT 
            {
              UnOpNode.OpType RESULT =null;
		
      // RESULT = UnOpNode.OpType.NOT;
      System.out.println("UnaryOperator -> NOT");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOperator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // UnaryOperator ::= MINUS 
            {
              UnOpNode.OpType RESULT =null;
		
      // RESULT = UnOpNode.OpType.UMINUS;
      System.out.println("UnaryOperator -> UMINUS");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOperator",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // UnaryExpression ::= PostfixExpression 
            {
              ExpressionNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode p = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = p;
      System.out.println("UnaryExpression -> PostfixExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // UnaryExpression ::= UnaryOperator CastExpression 
            {
              ExpressionNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		UnOpNode.OpType u = (UnOpNode.OpType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new UnOpNode(u, c);
      System.out.println("UnaryExpression -> UnaryOperator CastExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CastExpression ::= L_PAREN Type R_PAREN CastExpression 
            {
              ExpressionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Types.Type t = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new UnOpNode(UnOpNode.OpType.CAST, c, t);
      System.out.println("CastExpression -> L_PAREN Type R_PAREN CastExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CastExpression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CastExpression ::= UnaryExpression 
            {
              ExpressionNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode u = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = u;
      System.out.println("CastExpression -> UnaryExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CastExpression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MultiplicativeExpression ::= MultiplicativeExpression MOD CastExpression 
            {
              ExpressionNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode m = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.MOD, m, c);
      System.out.println("MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MultiplicativeExpression ::= MultiplicativeExpression DIVIDE CastExpression 
            {
              ExpressionNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode m = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.DIVIDE, m, c);
      System.out.println("MultiplicativeExpression -> MultiplicativeExpression DIVIDE CastExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MultiplicativeExpression ::= MultiplicativeExpression TIMES CastExpression 
            {
              ExpressionNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode m = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.TIMES, m, c);
      System.out.println("MultiplicativeExpression -> MultiplicativeExpression TIMES CastExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MultiplicativeExpression ::= CastExpression 
            {
              ExpressionNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = c;
      System.out.println("MultiplicativeExpression -> CastExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression 
            {
              ExpressionNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode m = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
      // RESULT = new BiOpNode(BiOpNode.OpType.MINUS, a, m);
      System.out.println("AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression 
            {
              ExpressionNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode m = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.PLUS, a, m);
      System.out.println("AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AdditiveExpression ::= MultiplicativeExpression 
            {
              ExpressionNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode m = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = m;
      System.out.println("AdditiveExpression -> MultiplicativeExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RelationalExpression ::= RelationalExpression GRTR_EQL AdditiveExpression 
            {
              ExpressionNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.GRTR_EQL, r, a);
      System.out.println("RelationalExpression -> RelationalExpression GRTR_EQL AdditiveExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RelationalExpression ::= RelationalExpression LESS_EQL AdditiveExpression 
            {
              ExpressionNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.LESS_EQL, r, a);
      System.out.println("RelationalExpression -> RelationalExpression LESS_EQL AdditiveExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RelationalExpression ::= RelationalExpression GRTR AdditiveExpression 
            {
              ExpressionNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.GRTR, r, a);
      System.out.println("RelationalExpression -> RelationalExpression GRTR AdditiveExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RelationalExpression ::= RelationalExpression LESS AdditiveExpression 
            {
              ExpressionNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.LESS, r, a);
      System.out.println("RelationalExpression -> RelationalExpression LESS AdditiveExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RelationalExpression ::= AdditiveExpression 
            {
              ExpressionNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = a;
      System.out.println("RelationalExpression -> AdditiveExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EqualityExpression ::= EqualityExpression NOT_EQLS RelationalExpression 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.NOT_EQLS, e, r);
      System.out.println("EqualityExpression -> EqualityExpression NOT_EQLS RelationalExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EqualityExpression ::= EqualityExpression DBL_EQLS RelationalExpression 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.DBL_EQLS, e, r);
      System.out.println("EqualityExpression -> EqualityExpression DBL_EQLS RelationalExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EqualityExpression ::= RelationalExpression 
            {
              ExpressionNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
      // RESULT = r; 
      System.out.println("EqualityExpression -> RelationalExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LogicalTerm ::= EqualityExpression 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = e;
      System.out.println("LogicalTerm -> EqualityExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalTerm",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LogicalTerm ::= LogicalTerm AND EqualityExpression 
            {
              ExpressionNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.AND, l, e);
      System.out.println("LogicalTerm -> LogicalTerm AND EqualityExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalTerm",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LogicalExpression ::= LogicalTerm 
            {
              ExpressionNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = l;
      System.out.println("LogicalExpression -> LogicalTerm");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LogicalExpression ::= LogicalExpression OR LogicalTerm 
            {
              ExpressionNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode le = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode lt = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.OR, le, lt);
      System.out.println("LogicalExpression -> LogicalExpression OR LogicalTerm");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expression ::= UnaryExpression ASSIGN Expression 
            {
              ExpressionNode RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode ue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new BiOpNode(BiOpNode.OpType.ASSIGN, ue, e);
      System.out.println("Expression -> UnaryExpression ASSIGN Expression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expression ::= LogicalExpression 
            {
              ExpressionNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode le = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     // RESULT = le;
     System.out.println("Expression -> LogicalExpression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ExpressionStatement ::= Expression 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = e;
      System.out.println("ExpressionStatement -> Expression NEWLINE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStatement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ExpressionStatement ::= 
            {
              StatementNode RESULT =null;
		
      /* TODO is this correct? */
      System.out.println("ExpressionStatement -> NEWLINE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStatement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // JumpStatement ::= RETURN Expression 
            {
              Object RESULT =null;
		
      System.out.println("JumpStatement -> RETURN Expression");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // JumpStatement ::= BREAK 
            {
              Object RESULT =null;
		
      System.out.println("JumpStatement -> BREAK NEWLINE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // JumpStatement ::= CONTINUE 
            {
              Object RESULT =null;
		
      System.out.println("JumpStatement -> CONTINUE NEWLINE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= JumpStatement 
            {
              StatementNode RESULT =null;
		
      System.out.println("Statement -> JumpStatement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= LabeledStatement 
            {
              StatementNode RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode ls = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     // List<Node> children = new ArrayList<Node>();
     // children.add(ls);
     // RESULT = new StatementNode(children);
     System.out.println("Statement -> LabeledStatement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= IterationStatement 
            {
              StatementNode RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode is = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // List<Node> children = new ArrayList<Node>();
      // children.add(is);
      // RESULT = new StatementNode(children);
      System.out.println("Statement -> IterationStatement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= SelectionStatement 
            {
              StatementNode RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode ss = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // List<Node> children = new ArrayList<Node>();
      // children.add(ss);
      // RESULT = new StatementNode(children);
      System.out.println("Statement -> SelectionStatement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= ExpressionStatement 
            {
              StatementNode RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode es = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // List<Node> children = new ArrayList<Node>();
      // children.add(es);
      // RESULT = new StatementNode(children);
      System.out.println("Statement -> ExpressionStatement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // StatementList ::= StatementList NEWLINE Statement 
            {
              StatementNode RESULT =null;
		
      System.out.println("StatementList -> StatementList Statement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // StatementList ::= NEWLINE Statement 
            {
              StatementNode RESULT =null;
		
      System.out.println("StatementList -> Statement");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Main ::= MAIN L_BRACE StatementList R_BRACE 
            {
              SectionNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode sl = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = new SectionNode(sl);
      System.out.println("Main -> MAIN L_BRACE StatementList R_BRACE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SectionType ::= L_PAREN Type ID COMMA Type ID R_PAREN ARROW L_PAREN Type COMMA Type R_PAREN 
            {
              SectionTypeNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Types.Type t1 = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Types.Type t2 = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Types.Type t3 = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types.Type t4 = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
     // RESULT = new SectionTypeNode(t1, t2, t3, t4);
     System.out.println("SectionType -> L_PAREN Type ID COMMA Type ID R_PAREN ARROW L_PAREN Type COMMA Type R_PAREN");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SectionType",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Reduce ::= REDUCE SectionType L_BRACE StatementList R_BRACE 
            {
              SectionNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SectionTypeNode st = (SectionTypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode sl = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = new SectionNode(st, sl);
      System.out.println("Reduce -> REDUCE SectionType L_BRACE StatementList R_BRACE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Reduce",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Map ::= MAP SectionType L_BRACE StatementList R_BRACE 
            {
              SectionNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SectionTypeNode st = (SectionTypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode sl = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = new SectionNode(st, sl);
      System.out.println("Map -> MAP SectionType L_BRACE StatementList R_BRACE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Map",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ParameterList ::= 
            {
              ParametersNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ParameterList ::= Type ID 
            {
              ParametersNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types.Type t = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new ParametersNode(t, i);
      System.out.println("Type ID: " + i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ParameterList ::= ParameterList COMMA Type ID 
            {
              ParametersNode RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParametersNode pl = (ParametersNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types.Type t = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new ParametersNode(t, i, pl);
      System.out.println("ParameterList -> ParameterList COMMA Type ID: " + i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Function ::= Type ID L_PAREN ParameterList R_PAREN L_BRACE StatementList R_BRACE 
            {
              FunctionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Types.Type t = (Types.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParametersNode pl = (ParametersNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode sl = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      // RESULT = new FunctionNode(t, pl, sl); 
      System.out.println("Function -> Type ID L_PAREN ParameterList R_PAREN L_BRACE StatementList R_BRACE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunctionList ::= FunctionList NEWLINE Function 
            {
              StatementNode RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StatementNode fl = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionNode f = (FunctionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // List<Node> children = new ArrayList<Node>();
      // children.add(fl);
      // children.add(f);
      // RESULT = new StatementNode(children);
      System.out.println("FunctionList -> FunctionList Function");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FunctionList ::= NEWLINE Function 
            {
              StatementNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionNode f = (FunctionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = f;
      System.out.println("FunctionList -> Function");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Functions ::= 
            {
              SectionNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Functions ::= FUNCTIONS L_BRACE FunctionList NEWLINE R_BRACE 
            {
              SectionNode RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StatementNode fl = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
     // RESULT = new SectionNode(fl);
     System.out.println("Functions -> FUNCTIONS L_BRACE FunctionList R_BRACE");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Functions NEWLINE Map NEWLINE Reduce NEWLINE Main 
            {
              ProgramNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SectionNode f = (SectionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SectionNode m = (SectionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SectionNode r = (SectionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SectionNode n = (SectionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      // RESULT = new ProgramNode(f, m, r, n);
      System.out.println("PROGRAM");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

