package front_end;
import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import util.ast.node.*;
import util.type.*;
import java.util.logging.*;

action code
  {:
    Hashtable table = new Hashtable();
    protected final static Logger LOGGER = Logger.getLogger(Parser.class
            .getName());
  :};

parser code
  {:
    Lexer lexer;
    private File file;
    public Parser( File file ) {
      this();
      this.file = file;
      try {
        lexer = new Lexer( new FileReader( file ) );
      }
      catch ( IOException exception ) {
        throw new Error( "Unable to open file \"" + file + "\"" );
      }
    }
    
    public Parser(Lexer l) {
      super(l);
      lexer=l;
    }
  :};

scan with
  {:
    return lexer.next_token();
  :};

terminal DECR, INCR, RETURN, CONTINUE;
terminal TIMES, DIVIDE, MOD;
terminal LESS, GRTR, LESS_EQL, GRTR_EQL, DBL_EQLS, NOT_EQLS, ASSIGN;
terminal TEXT, BOOL, INT, REAL, VOID;
terminal MINUS, UMINUS, PLUS;
terminal ARROW, DOT;
terminal String TEXT_LITERAL;
terminal String ID;
terminal String INT_CONST;
terminal String REAL_CONST;
terminal String BOOL_CONST;
terminal String CASE;
terminal BREAK, DEFAULT;
terminal AND, OR, NOT;
terminal WHILE, FOR, FOREACH, IN, IF, ELSE, ELSEIF, SWITCH;
terminal FUNCTIONS, MAIN, MAP, REDUCE;
terminal L_BRACE, R_BRACE, L_BRKT, R_BRKT, L_PAREN, R_PAREN, SEMICOL, COL, COMMA;
terminal LIST, ITER, DICT, MULTISET, SET;
terminal TRY, CATCH, FINALLY;

nonterminal GuardingStatementNode GuardingStatement;
nonterminal CatchesNode Catches;
nonterminal CatchesNode Catch;
nonterminal IdNode CatchHeader;
nonterminal StatementListNode Finally;
nonterminal StatementListNode Block;
nonterminal ExpressionStatements;
nonterminal ForExpr;
nonterminal ForInit;
nonterminal ForIncr;


nonterminal ProgramNode Program;
nonterminal SectionNode Functions;
nonterminal SectionNode Main;
nonterminal SectionNode Map;
nonterminal SectionNode Reduce;
nonterminal SectionTypeNode SectionType;
nonterminal StatementNode Statement;
nonterminal StatementNode ExpressionStatement;
nonterminal StatementNode FunctionList;
nonterminal StatementNode IterationStatement;
nonterminal StatementNode LabeledStatement;
nonterminal SelectionStatementNode SelectionStatement;
nonterminal StatementNode DeclarationStatement;
nonterminal StatementListNode StatementList;
nonterminal ElseIfStatementNode ElseIfStatement;
nonterminal ElseStatementNode ElseStatement;
nonterminal JumpStatementNode JumpStatement;
nonterminal ExpressionNode EqualityExpression;
nonterminal ExpressionNode LogicalExpression;
nonterminal ExpressionNode LogicalTerm;
nonterminal ExpressionNode RelationalExpression;
nonterminal ExpressionNode Expression;
nonterminal ExpressionNode AdditiveExpression;
nonterminal ExpressionNode MultiplicativeExpression;
nonterminal ExpressionNode CastExpression;
nonterminal ExpressionNode UnaryExpression;
nonterminal ExpressionNode PostfixExpression;
nonterminal ExpressionNode PrimaryExpression;
nonterminal ExpressionNode Constant;
nonterminal ExpressionNode ArgumentExpressionList;
nonterminal FunctionNode Function;
nonterminal ParametersNode ParameterList;
nonterminal TypeNode Type;
nonterminal UnOpNode.OpType UnaryOperator;
nonterminal Types.Derived DerivedType;

precedence left MINUS, PLUS;
precedence right UMINUS;
precedence right ELSE;
precedence right ELSEIF;
precedence right L_PAREN;

start with Program;

Program::=
    Functions:f Map:m Reduce:r Main:n
    {:
      RESULT = new ProgramNode(f, m, r, n);
      CUP$Parser$actions.LOGGER.info("Functions Map Reduce Main -> Program");
    :}
  ;

Functions::=
    FUNCTIONS L_BRACE FunctionList:fl R_BRACE
    {:
     RESULT = new SectionNode(fl, SectionNode.SectionName.FUNCTIONS);
     CUP$Parser$actions.LOGGER.info("FUNCTIONS L_BRACE FunctionList R_BRACE -> Functions");
    :}
  |
    /* epsilon */
    {:
     CUP$Parser$actions.LOGGER.info("epsilon -> Functions");
    :}
  ; 
 
FunctionList::=
    Function:f
    {:
      RESULT = f;
      CUP$Parser$actions.LOGGER.info("Function -> FunctionList");
    :}
  |
    FunctionList:fl Function:f
    {:
      RESULT = new StatementNode(fl, f);
      CUP$Parser$actions.LOGGER.info("FunctionList Function -> FunctionList");
    :}
  ;

Function::=
    Type:t ID:i L_PAREN ParameterList:pl R_PAREN L_BRACE StatementList:sl R_BRACE
    {:
      RESULT = new FunctionNode(t, i, pl, sl); 
      CUP$Parser$actions.LOGGER.info("Type ID L_PAREN ParameterList R_PAREN L_BRACE StatementList R_BRACE -> Function");
    :}
  ;

ParameterList::=
    ParameterList:pl COMMA Type:t ID:i
    {:
      RESULT = new ParametersNode(t, i, pl);
      CUP$Parser$actions.LOGGER.info("ParameterList COMMA Type ID: " + i + " -> ParameterList");
    :}
  |
    Type:t ID:i
    {:
      RESULT = new ParametersNode(t, i);
      CUP$Parser$actions.LOGGER.info("Type ID: " + i + " -> ParameterList");
    :}
  |
    /* epsilon */
  ;

Map::=
    MAP SectionType:st L_BRACE StatementList:sl R_BRACE
    {:
      RESULT = new SectionNode(st, sl, SectionNode.SectionName.MAP);
      CUP$Parser$actions.LOGGER.info("MAP SectionType L_BRACE StatementList R_BRACE -> Map");
    :}
  ;

Reduce::=
    REDUCE SectionType:st L_BRACE StatementList:sl R_BRACE
    {:
      RESULT = new SectionNode(st, sl, SectionNode.SectionName.REDUCE);
      CUP$Parser$actions.LOGGER.info("REDUCE SectionType L_BRACE StatementList R_BRACE -> Reduce");
    :}
  ;

SectionType::=
    L_PAREN Type:t1 ID:i1 COMMA Type:t2 ID:i2 R_PAREN ARROW L_PAREN Type:t3 COMMA Type:t4 R_PAREN
    {:
     RESULT = new SectionTypeNode(new IdNode(t1, i1), new IdNode(t2, i2), t3, t4);
     CUP$Parser$actions.LOGGER.info("L_PAREN Type ID COMMA Type ID R_PAREN ARROW L_PAREN Type COMMA Type R_PAREN -> SectionType");
    :}
  ;

Main::=
    MAIN L_BRACE StatementList:sl R_BRACE
    {:
      RESULT = new SectionNode(sl, SectionNode.SectionName.MAIN);
      CUP$Parser$actions.LOGGER.info("MAIN L_BRACE StatementList R_BRACE -> Main");
    :}
  ;

StatementList::=
    Statement:s
    {:
      RESULT = s;
      CUP$Parser$actions.LOGGER.info("Statement -> StatementList");
    :}
  |
    StatementList:sl Statement:s
    {:
      RESULT = new StatementListNode(sl, s);
      CUP$Parser$actions.LOGGER.info("StatementList Statement -> StatementList");
    :}
  ;

Statement::=
    ExpressionStatement:es
    {:
      RESULT = es;
      CUP$Parser$actions.LOGGER.info("ExpressionStatement -> Statement");
    :}
  |
   SelectionStatement:ss
    {:
      RESULT = ss;
      CUP$Parser$actions.LOGGER.info("SelectionStatement -> Statement");
    :}
  |
    IterationStatement:is
    {:
      RESULT = is;
      CUP$Parser$actions.LOGGER.info("IterationStatement -> Statement");
    :}
  |
    LabeledStatement:ls
    {:
     RESULT = ls;
     CUP$Parser$actions.LOGGER.info("LabeledStatement -> Statement");
    :}
  |
    JumpStatement:js
    {:
      RESULT = js;
      CUP$Parser$actions.LOGGER.info("JumpStatement -> Statement");
    :}
  | DeclarationStatement:ds
    {:
      RESULT = ds;
      CUP$Parser$actions.LOGGER.info("DeclarationStatement -> Statement");
    :}
  | GuardingStatement:gs
    {:
      RESULT = gs;
      CUP$Parser$actions.LOGGER.info("GuardingStatement -> Statement: NOT IMPLEMENTED");
    :}
  | Block
    {:
      //TODO implement Block
      CUP$Parser$actions.LOGGER.info("Block -> Statement: NOT IMPLEMENTED");
    :}
  ;

GuardingStatement::=
    TRY Block:b Finally:f
    {:
      RESULT = new GuardingStatementNode(b, f);
      CUP$Parser$actions.LOGGER.info("TRY Block Finally -> GuardingStatment: NOT IMPLEMENTED");
    :}
   |
    TRY Block:b Catches:c
    {:
      RESULT = new GuardingStatementNode(b, c);
      CUP$Parser$actions.LOGGER.info("TRY Block Catches -> GuardingStatment: NOT IMPLEMENTED");
    :}
   | 
    TRY Block:b Catches:c Finally:f
    {:
      RESULT = new GuardingStatementNode(b, c, f);
      CUP$Parser$actions.LOGGER.info("TRY Block Catches Finally -> GuardingStatment: NOT IMPLEMENTED");
    :}
;

Block::=
    L_BRACE StatementList:sl R_BRACE
    {:
      RESULT = sl;
      CUP$Parser$actions.LOGGER.info("L_BRACE StatementList R_BRACE -> Block");
    :}
  | 
    L_BRACE R_BRACE
    {:
      CUP$Parser$actions.LOGGER.info("L_BRACE R_BRACE -> Block");
    :}
;

Finally::=
    FINALLY Block:b
    {:
      RESULT = b;
      CUP$Parser$actions.LOGGER.info("FINALLY Block -> Finally: NOT IMPLEMENTED");
    :}
;

Catches::=
    Catch:c
    {:
      RESULT = c;
      CUP$Parser$actions.LOGGER.info("Catch -> Catches: NOT IMPLEMENTED");
    :}
   | 
    Catches:cs Catch:c
    {:
      IdNode header = cs.getHeader();
      StatementListNode block = cs.getBlock();
      header.unsetParent();
      block.unsetParent();
      RESULT = new CatchesNode(header, block, c);
      CUP$Parser$actions.LOGGER.info("Catches Catch -> Catches: NOT IMPLEMENTED");
    :}
;

Catch::=
   CatchHeader:c Block:b
    {:
      RESULT = new CatchesNode(c, b);
      CUP$Parser$actions.LOGGER.info("CatchHeader Block -> Catch: NOT IMPLEMENTED");
    :}
  ;

CatchHeader::=
   CATCH L_PAREN Type:t ID:i R_PAREN
   {:
      RESULT = new IdNode(t, i);
      CUP$Parser$actions.LOGGER.info("CATCH L_PAREN Type ID R_PAREN -> CatchHeader: NOT IMPLEMENTED");
   :}
  |
   CATCH L_PAREN Type:t R_PAREN
   {:
      // TODO is the fix below too weird?
      RESULT = new IdNode(t, "");
      CUP$Parser$actions.LOGGER.info("CATCH L_PAREN Type R_PAREN -> CatchHeader: NOT IMPLEMENTED");
   :}
  ;
 
DeclarationStatement::=
    Type:t ID:i
    {:
      RESULT = new IdNode(t, i);
      CUP$Parser$actions.LOGGER.info("Type ID -> DeclarationStatement");
    :}
  |
    Type:t ID:i ASSIGN Expression:e
    {:
      RESULT = new BiOpNode(BiOpNode.OpType.ASSIGN, new IdNode(t,i), e);
      CUP$Parser$actions.LOGGER.info("Type ID ASSIGN Expression -> DeclarationStatement");
    :}
  ;
 
JumpStatement::=
    CONTINUE
    {:
      RESULT = new JumpStatementNode(JumpStatementNode.JumpType.CONTINUE);
      CUP$Parser$actions.LOGGER.info("CONTINUE -> JumpStatement");
    :}
  |
    BREAK
    {:
      RESULT = new JumpStatementNode(JumpStatementNode.JumpType.BREAK);
      CUP$Parser$actions.LOGGER.info("BREAK -> JumpStatement");
    :}
  |
    RETURN ExpressionStatement:es
    {:
      RESULT = new JumpStatementNode(JumpStatementNode.JumpType.RETURN, es);
      CUP$Parser$actions.LOGGER.info("RETURN Expression -> JumpStatement");
    :}
  ;
 
ExpressionStatement::=
    SEMICOL
    {:
      CUP$Parser$actions.LOGGER.info("SEMICOL -> ExpressionStatement: NO RESULT STATEMENT");
    :}
  |
    Expression:e SEMICOL
    {:
      RESULT = e;
      CUP$Parser$actions.LOGGER.info("Expression SEMICOL -> ExpressionStatement");
    :}
  ;

Expression::=
    LogicalExpression:le
    {:
     RESULT = le;
     CUP$Parser$actions.LOGGER.info("LogicalExpression -> Expression");
    :}
  |
    UnaryExpression:ue ASSIGN Expression:e
    {:
      RESULT = new BiOpNode(BiOpNode.OpType.ASSIGN, ue, e);
      CUP$Parser$actions.LOGGER.info("UnaryExpression ASSIGN Expression -> Expression");
    :}
  ;

LogicalExpression::=
    LogicalExpression:le OR LogicalTerm:lt
    {:
      RESULT = new BiOpNode(BiOpNode.OpType.OR, le, lt);
      CUP$Parser$actions.LOGGER.info("LogicalExpression OR LogicalTerm -> LogicalExpression");
    :}
  |
    LogicalTerm:l
    {:
      RESULT = l;
      CUP$Parser$actions.LOGGER.info("LogicalTerm -> LogicalExpression");
    :}
  ;

LogicalTerm::=
    LogicalTerm:l AND EqualityExpression:e
    {:
      RESULT = new BiOpNode(BiOpNode.OpType.AND, l, e);
      CUP$Parser$actions.LOGGER.info("LogicalTerm AND EqualityExpression -> LogicalTerm");
    :}
  |
    EqualityExpression:e
    {:
      RESULT = e;
      CUP$Parser$actions.LOGGER.info("EqualityExpression -> LogicalTerm");
    :}
  ;

EqualityExpression::=
    RelationalExpression:r
    {: 
      RESULT = r; 
      CUP$Parser$actions.LOGGER.info("RelationalExpression -> EqualityExpression");
    :}
  |
    EqualityExpression:e DBL_EQLS RelationalExpression:r
    {:
      RESULT = new BiOpNode(BiOpNode.OpType.DBL_EQLS, e, r);
      CUP$Parser$actions.LOGGER.info("EqualityExpression DBL_EQLS RelationalExpression -> EqualityExpression");
    :}
  |
    EqualityExpression:e NOT_EQLS RelationalExpression:r
    {:
      RESULT = new BiOpNode(BiOpNode.OpType.NOT_EQLS, e, r);
      CUP$Parser$actions.LOGGER.info("EqualityExpression NOT_EQLS RelationalExpression -> EqualityExpression");
    :}
  ;

RelationalExpression::=
    AdditiveExpression:a
    {:
      RESULT = a;
      CUP$Parser$actions.LOGGER.info("AdditiveExpression -> RelationalExpression");
    :}
  |
    RelationalExpression:r LESS AdditiveExpression:a
    {:
      RESULT = new BiOpNode(BiOpNode.OpType.LESS, r, a);
      CUP$Parser$actions.LOGGER.info("RelationalExpression LESS AdditiveExpression -> RelationalExpression");
    :}
  |
    RelationalExpression:r GRTR AdditiveExpression:a
    {:
      RESULT = new BiOpNode(BiOpNode.OpType.GRTR, r, a);
      CUP$Parser$actions.LOGGER.info("RelationalExpression GRTR AdditiveExpression -> RelationalExpression");
    :}
  |
    RelationalExpression:r LESS_EQL AdditiveExpression:a
    {:
      RESULT = new BiOpNode(BiOpNode.OpType.LESS_EQL, r, a);
      CUP$Parser$actions.LOGGER.info("RelationalExpression LESS_EQL AdditiveExpression -> RelationalExpression");
    :}
  |
    RelationalExpression:r GRTR_EQL AdditiveExpression:a
    {:
      RESULT = new BiOpNode(BiOpNode.OpType.GRTR_EQL, r, a);
      CUP$Parser$actions.LOGGER.info("RelationalExpression GRTR_EQL AdditiveExpression -> RelationalExpression");
    :}
  ;

AdditiveExpression::=
    MultiplicativeExpression:m
    {:
      RESULT = m;
      CUP$Parser$actions.LOGGER.info("MultiplicativeExpreesion -> AdditiveExpression");
    :}
  |
    AdditiveExpression:a PLUS MultiplicativeExpression:m
    {:
      RESULT = new BiOpNode(BiOpNode.OpType.PLUS, a, m);
      CUP$Parser$actions.LOGGER.info("AdditiveExpression PLUS MultiplicativeExpression -> AdditiveExpression");
    :}
  |
    AdditiveExpression:a MINUS MultiplicativeExpression:m
    {: 
      RESULT = new BiOpNode(BiOpNode.OpType.MINUS, a, m);
      CUP$Parser$actions.LOGGER.info("AdditiveExpression MINUS MultiplicativeExpression -> AdditiveExpression");
    :}
  ;

MultiplicativeExpression::=
    CastExpression:c
    {:
      RESULT = c;
      CUP$Parser$actions.LOGGER.info("CastExpression -> MultiplicativeExpression");
    :}
  |
    MultiplicativeExpression:m TIMES CastExpression:c
    {:
      RESULT = new BiOpNode(BiOpNode.OpType.TIMES, m, c);
      CUP$Parser$actions.LOGGER.info("MultipliativeExpression TIMES CastExpression -> MultiplicativeExpression");
    :}
  |
    MultiplicativeExpression:m DIVIDE CastExpression:c
    {:
      RESULT = new BiOpNode(BiOpNode.OpType.DIVIDE, m, c);
      CUP$Parser$actions.LOGGER.info("MultipliativeExpression DIVIDE CastExpression -> MultiplicativeExpression");
    :}
  |
    MultiplicativeExpression:m MOD CastExpression:c
    {:
      RESULT = new BiOpNode(BiOpNode.OpType.MOD, m, c);
      CUP$Parser$actions.LOGGER.info("MultipliativeExpression MOD CastExpression -> MultiplicativeExpression");
    :}
  ;

CastExpression::=
    UnaryExpression:u
    {:
      RESULT = u;
      CUP$Parser$actions.LOGGER.info("UnaryExpression -> CastExpression");
    :}
  |
    L_PAREN Type:t R_PAREN CastExpression:c
    {:
      RESULT = new UnOpNode(t, UnOpNode.OpType.CAST, c);
      CUP$Parser$actions.LOGGER.info("L_PAREN Type R_PAREN CastExpression -> CastExpression");
    :}
  ;

UnaryExpression::=
    UnaryOperator:u CastExpression:c
    {:
      RESULT = new UnOpNode(u, c);
      CUP$Parser$actions.LOGGER.info("UnaryOperator CastExpression -> UnaryExpression");
    :}
  |
    PostfixExpression:p
    {:
      RESULT = p;
      CUP$Parser$actions.LOGGER.info("PostfixExpression -> UnaryExpression");
    :}
  ;
  
UnaryOperator::=
    MINUS 
    {:
      RESULT = UnOpNode.OpType.UMINUS;
      CUP$Parser$actions.LOGGER.info("UMINUS -> UnaryOperator");
    :}
    %prec UMINUS
  |
    NOT
    {:
      RESULT = UnOpNode.OpType.NOT;
      CUP$Parser$actions.LOGGER.info("NOT -> UnaryOperator");
    :}
  ;

PostfixExpression::=
    PrimaryExpression:p
    {:
      RESULT = p;
      CUP$Parser$actions.LOGGER.info("PrimaryExpression -> PostFixExpression");
    :}
  |
    PostfixExpression:p L_BRKT Expression:e R_BRKT
    {:
      // array indexing
      RESULT = new PostfixExpressionNode(PostfixExpressionNode.PostfixType.ARRAY_INDEX, p, e);
      CUP$Parser$actions.LOGGER.info("PostfixExpression L_BRKT Expression R_BRKT -> PostFixExpression");
    :}
  |
    PostfixExpression:p DOT ID:i
    {:
      // object method call no params
      IdNode idNode = new IdNode(i);
      RESULT = new PostfixExpressionNode(PostfixExpressionNode.PostfixType.METHOD_NO_PARAMS, p, idNode);
      CUP$Parser$actions.LOGGER.info("PostfixExpression DOT ID: " + i + " -> PostFixExpression");
    :}
  |
    PostfixExpression:p DOT ID:i L_PAREN ArgumentExpressionList:a R_PAREN
    {:
      // object method call with params
      IdNode idNode = new IdNode(i);
      RESULT = new PostfixExpressionNode(PostfixExpressionNode.PostfixType.METHOD_WITH_PARAMS, p, idNode, a);
      CUP$Parser$actions.LOGGER.info("PostfixExpression DOT ID: " + i + "L_PAREN ArgumentList R_PAREN -> PostFixExpression");
    :}
  |
  
    PostfixExpression:p L_PAREN ArgumentExpressionList:a R_PAREN
    {:
      //function call
      RESULT = new PostfixExpressionNode(PostfixExpressionNode.PostfixType.FUNCTION_CALL, p, a);
      CUP$Parser$actions.LOGGER.info("PostfixExpression L_PAREN ArgumentExpressionList R_PAREN -> PostFixExpression");
    :}
  |
    PostfixExpression:p INCR
    {:
      RESULT = new UnOpNode(UnOpNode.OpType.INCR, p);
      CUP$Parser$actions.LOGGER.info("PostfixExpression INCR -> PostFixExpression");
    :}
  |
    PostfixExpression:p DECR
    {:
      RESULT = new UnOpNode(UnOpNode.OpType.DECR, p);
      CUP$Parser$actions.LOGGER.info("PostfixExpression DECR -> PostFixExpression");
    :}
  ;

ArgumentExpressionList::=
    Expression:e
    {:
      RESULT = e;
      CUP$Parser$actions.LOGGER.info("Expression -> ArgumentExpressionList");
    :}
  |
    ArgumentExpressionList:a COMMA Expression:e
    {:
      RESULT = new ArgumentsNode(a,e);
      CUP$Parser$actions.LOGGER.info("ArgumentExpressionList COMMA Expression -> ArgumentExpressionList");
    :}
  |
    /* epsilon */
    {:
      CUP$Parser$actions.LOGGER.info("epsilon -> ArgumentExpressionList");
    :}
 
 ;

PrimaryExpression::=
    ID:i
    {:
      RESULT = new IdNode(i);
      CUP$Parser$actions.LOGGER.info("ID: " + i + " -> PrimaryExpression");
    :}
  |
    Constant:c
    {:
      RESULT = c;
      CUP$Parser$actions.LOGGER.info("Constant -> PrimaryExpression");
    :}
  |
    L_PAREN Expression:e R_PAREN
    {:
      RESULT = e;
      CUP$Parser$actions.LOGGER.info("L_PAREN Expression R_PAREN -> PrimaryExpression");
    :}
  ;

Constant::=
    INT_CONST:i
    {:
      RESULT = new ConstantNode(Types.Primitive.INT, i);
      CUP$Parser$actions.LOGGER.info("INT_CONST: " + i + " -> Constant");
    :}
  |
    REAL_CONST:d
    {:
      RESULT = new ConstantNode(Types.Primitive.REAL, d);
      CUP$Parser$actions.LOGGER.info("REAL_CONST: " + d + " -> Constant");
    :}
  |
    BOOL_CONST:b
    {:
      RESULT = new ConstantNode(Types.Primitive.BOOL, b);
      CUP$Parser$actions.LOGGER.info("BOOL_CONST: " + b + " -> Constant");
    :}
  |
    TEXT_LITERAL:t
    {:
      RESULT = new ConstantNode(Types.Primitive.TEXT, t);
      CUP$Parser$actions.LOGGER.info("TEXT_LITERAL: " + t + " -> Constant");
    :}
  ;

SelectionStatement::=
    IF Expression:e L_BRACE StatementList:s R_BRACE ElseIfStatement:elif ElseStatement:el
    {:
      RESULT = new IfElseStatementNode(e, s, elif, el);
      CUP$Parser$actions.LOGGER.info("IF Expression L_BRACE StatmentList R_BRACE " +
                                      "ElseIfStatement ElseStatment -> SelectionStatement");
    :}
  |
    SWITCH Expression:e L_BRACE StatementList:s R_BRACE
    {:
      //TODO implement
      CUP$Parser$actions.LOGGER.info("SWITCH Expression L_BRACE " +
                                      "StatementList R_BRACE -> SelectionStatement");
    :}
  ;

ElseIfStatement::=
    ELSEIF Expression:e L_BRACE StatementList:s R_BRACE ElseIfStatement:elif
    {:
      RESULT = new ElseIfStatementNode(e, s, elif);
      CUP$Parser$actions.LOGGER.info("ELSEIF L_PAREN Expression R_PAREN ElseIfStatement -> " +
                                      "ElseIfStatement");
    :}
  |
    /* epsilon */
    {:
      CUP$Parser$actions.LOGGER.info("epsilon -> ElseIfStatement");
    :}
  ;

ElseStatement::=
    ELSE L_BRACE StatementList:s R_BRACE
    {:
      RESULT = new ElseStatementNode(s);
      CUP$Parser$actions.LOGGER.info("ELSE L_BRACE StatementList R_BRACE -> ElseStatement");
    :}
  |
    /* epsilon */
    {:
      CUP$Parser$actions.LOGGER.info("epsilon -> ElseStatement");
    :}
  ;

IterationStatement::=
    WHILE L_PAREN Expression:e R_PAREN L_BRACE StatementList:s R_BRACE
    {:
      RESULT = new IterationStatementNode(e,s);
      CUP$Parser$actions.LOGGER.info("WHILE L_PAREN Expression R_PAREN L_BRACE " +
                                      "StatementList R_BRACE -> IterationStatement");
    :}
  |
    FOR L_PAREN ForInit:e1 ForExpr:e2 ForIncr:e3 R_PAREN L_BRACE StatementList:s R_BRACE
    {:
      //RESULT = new IterationStatementNode(e1,e2,e3,s);
      CUP$Parser$actions.LOGGER.info("FOR ForInit ForExpr ForInc L_BRACE StatementList " +
                                      "R_BRACE -> IterationStatement");
    :}
  |
    FOR L_PAREN ForInit ForExpr R_PAREN L_BRACE StatementList R_BRACE
    {:
      //RESULT = new IterationStatementNode(e1,e2,e3,s);
      CUP$Parser$actions.LOGGER.info("FOR L_BRACEN ForInit ForExpr R_PAREN L_BRACE " +
                                      "StatementList R_BRACE -> IterationStatement");
    :}
  |
    FOREACH Expression:e1 IN Expression:e2 L_BRACE StatementList:s R_BRACE
    {:
      RESULT = new IterationStatementNode(e1,e2,s);
      CUP$Parser$actions.LOGGER.info("FOREACH Expression IN Expression L_BRACE StatementList " +
                                      "R_BRACE -> IterationStatement"); 
    :}
  ;

ForInit::=
    ExpressionStatements
    {:
      CUP$Parser$actions.LOGGER.info("ExpressionStatements -> ForInit");
    :}
  |
    DeclarationStatement SEMICOL
    {:
      CUP$Parser$actions.LOGGER.info("DeclarationStatement SEMICOL -> ForInit");
    :}
  ;

ForExpr::=
    ExpressionStatement
    {:
      CUP$Parser$actions.LOGGER.info("ExpressionStatement -> ForExpr");
    :}
  ;

ForIncr::=
    ExpressionStatements
    {:
      CUP$Parser$actions.LOGGER.info("ExpressionStatements -> ForIncr");
    :}
  ;

ExpressionStatements::=
    ExpressionStatement
    {:
      CUP$Parser$actions.LOGGER.info("ExpressionStatement -> ExpressionStatements");
    :}
  |
    ExpressionStatements COMMA ExpressionStatement
    {:
      CUP$Parser$actions.LOGGER.info("ExpressionStatements COMMA ExpressionStatement -> " +
                                    "ExpressionStatements");
    :}
  ;
 
LabeledStatement::=
    CASE LogicalExpression COL Statement:s
    {:
      CUP$Parser$actions.LOGGER.info("CASE LogicalExpression COL Statement -> LabeledStatement");
    :}
  |
    DEFAULT:d COL Statement:s
    {:
      CUP$Parser$actions.LOGGER.info("DEFAULT COL Statement");
    :} 
  ;

Type::=
    VOID
    {:
      RESULT = new PrimitiveTypeNode(Types.Primitive.VOID);
      CUP$Parser$actions.LOGGER.info("VOID -> Type");
    :}
  |
    TEXT
    {:
      RESULT = new PrimitiveTypeNode(Types.Primitive.TEXT);
      CUP$Parser$actions.LOGGER.info("TEXT -> Type");
    :}
  |
    BOOL
    {:
      RESULT = new PrimitiveTypeNode(Types.Primitive.BOOL);
      CUP$Parser$actions.LOGGER.info("BOOL -> Type");
    :}
  |
    INT:i
    {:
      RESULT = new PrimitiveTypeNode(Types.Primitive.INT);
      CUP$Parser$actions.LOGGER.info("INT -> Type");
    :}
  |
    REAL
    {:
      RESULT = new PrimitiveTypeNode(Types.Primitive.REAL);
      CUP$Parser$actions.LOGGER.info("REAL -> Type");
    :}
  |
    DerivedType:d LESS Type:t GRTR
    {:
      RESULT = new DerivedTypeNode(d, t);
      CUP$Parser$actions.LOGGER.info("DerivedType LESS Type GRTR -> Type");
    :}
  ;

DerivedType::=
    LIST
    {:
      RESULT = Types.Derived.LIST;
      CUP$Parser$actions.LOGGER.info("LIST -> DerivedType");
    :}
  |
    ITER
    {:
      RESULT = Types.Derived.ITER;
      CUP$Parser$actions.LOGGER.info("ITER -> DerivedType");
    :}
  |
    DICT
    {:
      RESULT = Types.Derived.DICT;
      CUP$Parser$actions.LOGGER.info("DICT -> DerivedType");
    :}
  |
    MULTISET
    {:
      RESULT = Types.Derived.MULTISET;
      CUP$Parser$actions.LOGGER.info("MULTISET -> DerivedType");
    :}
  |
    SET
    {:
      RESULT = Types.Derived.SET;
      CUP$Parser$actions.LOGGER.info("SET -> DerivedType");
    :}
  ;
