package front_end;
import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import util.ast.node.*;

action code
  {:
    Hashtable table = new Hashtable();
  :};

parser code
  {:
    private Lexer lexer;
    private File file;
    public Parser( File file ) {
      this();
      this.file = file;
      try {
        lexer = new Lexer( new FileReader( file ) );
      }
      catch ( IOException exception ) {
        throw new Error( "Unable to open file \"" + file + "\"" );
      }
    }
  :};

scan with
  {:
    return lexer.next_token();
  :};

terminal UMINUS, DECR, INCR, RETURN, CONTINUE;
terminal MINUS, PLUS, TIMES, DIVIDE, MOD;
terminal LESS, GRTR, LESS_EQL, GRTR_EQL, DBL_EQLS, NOT_EQLS, ASSIGN;
terminal TEXT, BOOL, INT, REAL, LIST, VOID;
terminal ARROW, DOT;
terminal String CHAR;
terminal String TEXT_LITERAL;
terminal String ID;
terminal String INT_CONST;
terminal String REAL_CONST;
terminal String BOOL_CONST;
terminal BREAK, CASE, DEFAULT;
terminal AND, OR, NOT;
terminal WHILE, FOR, FOREACH, IN, IF, ELSE, ELSEIF, SWITCH;
terminal FUNCTIONS, MAIN, MAP, REDUCE;
terminal L_BRACE, R_BRACE, L_BRKT, R_BRKT, L_PAREN, R_PAREN, SEMICOL, COL, COMMA, NEWLINE;

nonterminal Program, Functions, FunctionList, Function, ParameterList, Map, Reduce, SectionType;
nonterminal Main, StatementList, ExpressionStatement, SelectionStatement, IterationStatement;
nonterminal LabeledStatement, Expression, Type, LogicalExpression, UnaryExpression, LogicalTerm;
nonterminal EqualityExpression, RelationalExpression, AdditiveExpression, MultiplicativeExpression;
nonterminal CastExpression, PostfixExpression, PrimaryExpression, Parameters, Constant;
nonterminal Statement, ElseIfStatement, ElseStatement;

start with Expression;

// comment out every production before Expression

Expression::=
    LogicalExpression:le
    {: RESULT = le; :}
  |
    UnaryExpression:ue ASSIGN Expression:e
    {: RESULT = new AssignmentExpressionNode(ue, e); :}
  ;

LogicalExpression::=
    LogicalExpression OR LogicalTerm
  |
    LogicalTerm:lt
    {: RESULT = lt; :}
  ;

LogicalTerm::=
    LogicalTerm AND EqualityExpression
  |
    EqualityExpression:ee
    {: RESULT = ee; :}
  ;

EqualityExpression::=
    RelationalExpression:re
    {: RESULT = re; :}
  |
    EqualityExpression DBL_EQLS RelationalExpression
  |
    EqualityExpression NOT_EQLS RelationalExpression
  ;

RelationalExpression::=
    AdditiveExpression:ae
    {: RESULT = ae; :}
  |
    RelationalExpression LESS AdditiveExpression
  |
    RelationalExpression GRTR AdditiveExpression
  |
    RelationalExpression LESS_EQL AdditiveExpression
  |
    RelationalExpression GRTR_EQL AdditiveExpression
  ;

AdditiveExpression::=
    MultiplicativeExpression:me
    {: RESULT = me;:}
  |
    AdditiveExpression:ae PLUS MultiplicativeExpression:me
    {: RESULT = new AdditiveExpressionNode(BiOpNode.OpType.PLUS, ae, me); :}
  |
    AdditiveExpression:ae MINUS MultiplicativeExpression:me
    {: 
       Node meNode = (Node) me;
       Node aeNode = (Node) ae;
       RESULT = new AdditiveExpressionNode(BiOpNode.OpType.MINUS, ae, me); 
    :}
  ;

MultiplicativeExpression::=
    CastExpression:ce
    {: RESULT = ce; :}
  |
    MultiplicativeExpression:me TIMES CastExpression:ce
    {: RESULT = new MultiplicativeExpressionNode(BiOpNode.OpType.TIMES, me, ce); :}
  |
    MultiplicativeExpression:me DIVIDE CastExpression:ce
    {: RESULT = new MultiplicativeExpressionNode(BiOpNode.OpType.DIVIDE, me, ce); :}
  |
    MultiplicativeExpression:me MOD CastExpression:ce
    {: RESULT = new MultiplicativeExpressionNode(BiOpNode.OpType.MOD, me, ce); :}
  ;

CastExpression::=
    UnaryExpression:ue
    {: RESULT = ue; :}
  |
    L_PAREN Type R_PAREN CastExpression:ce
  ;

UnaryExpression::=
    UMINUS CastExpression
  |
    NOT CastExpression
  |
    PostfixExpression:pe
    {: RESULT = pe; :}
  ;

PostfixExpression::=
    PrimaryExpression:pe
    {: RESULT = pe; :}
  |
    PostfixExpression INCR
  |
    PostfixExpression DECR
  ;

PrimaryExpression::=
    ID:id
    {: RESULT = new IdNode(id.identifierText); :}
  |
    ID DOT ID L_PAREN Parameters R_PAREN
  |
    Constant
  |
    TEXT_LITERAL
  |
    L_PAREN Expression R_PAREN
  ;

Parameters::=
    ID
  | 
    ID COMMA Parameters
  ;

Constant::=
    INT_CONST
  |
    REAL_CONST
  |
    BOOL_CONST
  ;

SelectionStatement::=
    IF L_PAREN Expression R_PAREN Statement ElseIfStatement ElseStatement
  |
    SWITCH L_PAREN Expression R_PAREN Statement
  ;

ElseIfStatement::=
    ELSEIF L_PAREN Expression R_PAREN ElseIfStatement
  |
    /* epsilon */
  ;

ElseStatement::=
    ELSE Statement
  |
    /* epsilon */
  ;

IterationStatement::=
    WHILE L_PAREN Expression R_PAREN Statement
  |
    FOR L_PAREN Expression SEMICOL Expression SEMICOL Expression R_PAREN Statement
  |
    FOREACH L_PAREN Expression IN Expression R_PAREN Statement
  ;
 
LabeledStatement::=
    CASE COL Statement
  |
    DEFAULT COL Statement 
  ;

Type::=
    VOID
  |
    TEXT
  |
    BOOL
  |
    INT
  |
    REAL
  ;