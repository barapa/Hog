@Functions {
  int fib(int n) {
    if n == 0 {
      return 0;
    } elseif n == 1 {
      return 1;
    } else {
      return fib(n-1) + fib(n-2);  
    }
  }
  
  int factorial(int n) {
    if n==0 or n==1 {
      return 1;
    }
    else {
    return n * factorial(n-1);
    }
  }
}

@Map (int lineNum, text line) -> (text, int) {
  #{ this is a 
       block comment }#
  int count = 1;
  dict<int, real> face;
  real face = 1.0;
  foreach word in line.tokenize(" ") {
    emit(word, 1);
  }
  if (count == 2) {
    print("count equals 2!");
  } elseif (count == 3) {
    print("count equals 3!");
  } else {
    int face = 0;
    int x = face + 1;
    face++;
    print("count equals something else");
  }
  
  list<int> face;
  try {
    face.get(0);
  } catch (FileNotFoundException exception) {
    print(exception);
  } catch (ArrayOutOfBoundsException exception) {
    print (exception);
  }
  for (int i = 0; i < 4; i++;) {
    print(i);
  }
}

@Reduce (text word, iter<int> values) -> (text, int) {
  int count = 0;
  while ( values.hasNext() ) {
    count = count + values.next();
  }
  emit(count, word);
}

@Main {
  mapReduce();
}
