@Functions {
  int fib(int n) {
    if n == 0 {
      return 0;
    } elseif n == 1 {
      return 1;
    } else {
      return fib(n-1) + fib(n-2);
    }
  }
}

@Map (int lineNum, text line) -> (text, int) {
  #{ this is a 
       block comment }#
  int count = 1;
  # uncommenting the following line makes @map bleed into @reduce
  # print("x")
  #while values.hasNext() {
  #  print("this is never going to end")
  #}
  #foreach word in line.tokenize(" ") {
  #  emit(word, 1)
  #}
}

@Reduce (text word, iter<int> values) -> (text, int) {
  # this is a line comment:
  int count = 0;
  #switch(count) {
  #  case 1: print("one")
  #          break
  #}
  list<text> textList; 
  list<list<text>> doubleList;
  list<list<text>> anotherDoubleList = doubleList;
  while values.hasNext() {
    count = count + values.next();
    int face = 5;
  }
  emit(count, word);
  if quit == (5 > 2) {
    return;
  }
}

@Main {
  mapReduce();
}
